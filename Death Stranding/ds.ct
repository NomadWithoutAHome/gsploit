<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>981</ID>
      <Description>"Compact Mode"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
LuaCall(function cycleFullCompact(sender,force) local state = not(compactmenuitem.Caption == 'Compact View Mode'); if force~=nil then state = not force end; compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'; getMainForm().Splitter1.Visible = state; getMainForm().Panel4.Visible    = state; getMainForm().Panel5.Visible    = state; end; function addCompactMenu() if compactmenualreadyexists then return end; local parent = getMainForm().Menu.Items; compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem); compactmenuitem.Caption = 'Compact View Mode'; compactmenuitem.OnClick = cycleFullCompact; compactmenualreadyexists = 'yes'; end; addCompactMenu(); cycleFullCompact(nil,true))

[DISABLE]
LuaCall(cycleFullCompact(nil,false))
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>969</ID>
      <Description>"Player"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>18</ID>
          <Description>"Restore Stamina &amp; BB Happiness on Drink"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-07-19
  Author : gregory

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(FULL_ON_MAX,ds.exe,C5 FA 11 83 08 01 00 00 * 83 C4 40) // should be unique
alloc(newmem,$1000,"ds.exe"+243CD89)

label(code)
label(return)

newmem:

code:
  vmovss xmm0,[noLockedGuage]
  vmovss [rbx+00000128],xmm0
  vmovss xmm0,[normalMax]
  vmovss [rbx+00000108],xmm0
  jmp return

noLockedGuage:
  dq (float)0

normalMax:
  dq (float)1000

FULL_ON_MAX:
  jmp newmem
  nop 3
return:
registersymbol(FULL_ON_MAX)

[DISABLE]

FULL_ON_MAX:
  db C5 FA 11 83 08 01 00 00

unregistersymbol(FULL_ON_MAX)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+243CD89

"ds.exe"+243CD5B: C5 EA 5C C3              -  vsubss xmm0,xmm2,xmm3
"ds.exe"+243CD5F: C5 FA 5F F4              -  vmaxss xmm6,xmm0,xmm4
"ds.exe"+243CD63: C5 FA 10 83 04 01 00 00  -  vmovss xmm0,[rbx+00000104]
"ds.exe"+243CD6B: C5 E2 58 D6              -  vaddss xmm2,xmm3,xmm6
"ds.exe"+243CD6F: C5 F8 2F C2              -  vcomiss xmm0,xmm0,xmm2
"ds.exe"+243CD73: C5 F2 59 E7              -  vmulss xmm4,xmm1,xmm7
"ds.exe"+243CD77: 77 04                    -  ja ds.exe+243CD7D
"ds.exe"+243CD79: C5 DA 5D C2              -  vminss xmm0,xmm4,xmm2
"ds.exe"+243CD7D: C5 F8 28 74 24 30        -  vmovaps xmm6,[rsp+30]
"ds.exe"+243CD83: C5 F8 28 7C 24 20        -  vmovaps xmm7,[rsp+20]
// ---------- INJECTING HERE ----------
"ds.exe"+243CD89: C5 FA 11 83 08 01 00 00  -  vmovss [rbx+00000108],xmm0
// ---------- DONE INJECTING  ----------
"ds.exe"+243CD91: 48 83 C4 40              -  add rsp,40
"ds.exe"+243CD95: 5B                       -  pop rbx
"ds.exe"+243CD96: C3                       -  ret 
"ds.exe"+243CD97: 90                       -  nop 
"ds.exe"+243CD98: 3D CD 43 02 3D           -  cmp eax,3D0243CD
"ds.exe"+243CD9D: CD 43                    -  int 43
"ds.exe"+243CD9F: 02 3D CD 43 02 3D        -  add bh,[17F461172]
"ds.exe"+243CDA5: CD 43                    -  int 43
"ds.exe"+243CDA7: 02 2F                    -  add ch,[rdi]
"ds.exe"+243CDA9: CD 43                    -  int 43
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"No Fatigue"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-07-19
  Author : gregory

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(NO_LOCKED_STAMINA,ds.exe,C5 FA 11 83 28 01 00 00 * * * * 24 20) // should be unique
alloc(newmem,$1000,"ds.exe"+24ADEDC)

label(code)
label(return)

newmem:

code:
  vmovss xmm0,[noLockedGuage]
  vmovss [rbx+00000128],xmm0
  jmp return

noLockedGuage:
  dq (float)0

NO_LOCKED_STAMINA:
  jmp newmem
  nop 3
return:
registersymbol(NO_LOCKED_STAMINA)

[DISABLE]

NO_LOCKED_STAMINA:
  db C5 FA 11 83 28 01 00 00

unregistersymbol(NO_LOCKED_STAMINA)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+24ADEDC

"ds.exe"+24ADEB3: C5 FA 10 8B 24 01 00 00        -  vmovss xmm1,[rbx+00000124]
"ds.exe"+24ADEBB: 84 C0                          -  test al,al
"ds.exe"+24ADEBD: 74 0C                          -  je ds.exe+24ADECB
"ds.exe"+24ADEBF: C5 F2 59 05 F9 B9 2B 01        -  vmulss xmm0,xmm1,[ds.exe+37698C0]
"ds.exe"+24ADEC7: C5 CA 5D F0                    -  vminss xmm6,xmm6,xmm0
"ds.exe"+24ADECB: C5 F8 57 C0                    -  vxorps xmm0,xmm0,xmm0
"ds.exe"+24ADECF: C5 F8 2F C6                    -  vcomiss xmm0,xmm0,xmm6
"ds.exe"+24ADED3: 77 04                          -  ja ds.exe+24ADED9
"ds.exe"+24ADED5: C5 F2 5D C6                    -  vminss xmm0,xmm1,xmm6
"ds.exe"+24ADED9: 48 8B CB                       -  mov rcx,rbx
// ---------- INJECTING HERE ----------
"ds.exe"+24ADEDC: C5 FA 11 83 28 01 00 00        -  vmovss [rbx+00000128],xmm0
// ---------- DONE INJECTING  ----------
"ds.exe"+24ADEE4: C5 F8 28 74 24 20              -  vmovaps xmm6,[rsp+20]
"ds.exe"+24ADEEA: 48 83 C4 30                    -  add rsp,30
"ds.exe"+24ADEEE: 5B                             -  pop rbx
"ds.exe"+24ADEEF: E9 6C 14 FF FF                 -  jmp ds.exe+249F360
"ds.exe"+24ADEF4: CC                             -  int 3 
"ds.exe"+24ADEF5: CC                             -  int 3 
"ds.exe"+24ADEF6: CC                             -  int 3 
"ds.exe"+24ADEF7: CC                             -  int 3 
"ds.exe"+24ADEF8: CC                             -  int 3 
"ds.exe"+24ADEF9: CC                             -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Infinite Consumables"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-07-17
  Author : gregory

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(INF_USE,ds.exe,66 45 89 84 4B 0A 01 00 00) // should be unique
alloc(newmem,$1000,"ds.exe"+29BFB22)

label(code)
label(return)

newmem:

code:
  cmp [r11+rcx*2+0000010A],r8w
  jg out
  mov [r11+rcx*2+0000010A],r8w
out:
  jmp return

INF_USE:
  jmp newmem
  nop 4
return:
registersymbol(INF_USE)

[DISABLE]

INF_USE:
  db 66 45 89 84 4B 0A 01 00 00

unregistersymbol(INF_USE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+29BFB22

"ds.exe"+29BFB05: 41 38 11                    -  cmp [r9],dl
"ds.exe"+29BFB08: 74 11                       -  je ds.exe+29BFB1B
"ds.exe"+29BFB0A: 41 FF C2                    -  inc r10d
"ds.exe"+29BFB0D: 48 FF C0                    -  inc rax
"ds.exe"+29BFB10: 49 83 C1 06                 -  add r9,06
"ds.exe"+29BFB14: 48 83 F8 0A                 -  cmp rax,0A
"ds.exe"+29BFB18: 7C EB                       -  jl ds.exe+29BFB05
"ds.exe"+29BFB1A: C3                          -  ret 
"ds.exe"+29BFB1B: 41 8B C2                    -  mov eax,r10d
"ds.exe"+29BFB1E: 48 8D 0C 40                 -  lea rcx,[rax+rax*2]
// ---------- INJECTING HERE ----------
"ds.exe"+29BFB22: 66 45 89 84 4B 0A 01 00 00  -  mov [r11+rcx*2+0000010A],r8w
// ---------- DONE INJECTING  ----------
"ds.exe"+29BFB2B: C3                          -  ret 
"ds.exe"+29BFB2C: CC                          -  int 3 
"ds.exe"+29BFB2D: CC                          -  int 3 
"ds.exe"+29BFB2E: CC                          -  int 3 
"ds.exe"+29BFB2F: CC                          -  int 3 
"ds.exe"+29BFB30: CC                          -  int 3 
"ds.exe"+29BFB31: CC                          -  int 3 
"ds.exe"+29BFB32: CC                          -  int 3 
"ds.exe"+29BFB33: CC                          -  int 3 
"ds.exe"+29BFB34: CC                          -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"No Blood Pack Drain"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-07-19
  Author : gregory

  This script does blah blah blah
}

{ Game   : ds.exe
  Version:
  Date   : 2020-07-18
  Author : gregory

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(GET_CURRENT_BLOOD_PACK,ds.exe,C5 FA 11 93 D8 47 00 00 76) // should be unique
alloc(newmem,$1000,"ds.exe"+265BB09)

label(code)
label(return)
label(bloodPack)

newmem:

code:
  mov [bloodPack],rbx
  add [bloodPack],000047D8
  //vmovss [rbx+000047D8],xmm2
  jmp return

bloodPack:
  dd 0

GET_CURRENT_BLOOD_PACK:
  jmp newmem
  nop 3

return:
registersymbol(GET_CURRENT_BLOOD_PACK)
registersymbol(bloodPack)

aobscanmodule(DRAIN_ON_HIT,ds.exe,C4 C1 7A 11 86 D8 47 00 00) // should be unique
alloc(newmem2,$1000,"ds.exe"+24E7BB5)

label(code2)
label(return2)

newmem2:

code2:
  //vmovss [r14+000047D8],xmm0
  jmp return2

DRAIN_ON_HIT:
  jmp newmem2
  nop 4
return2:
registersymbol(DRAIN_ON_HIT)

[DISABLE]

GET_CURRENT_BLOOD_PACK:
  db C5 FA 11 93 D8 47 00 00

unregistersymbol(GET_CURRENT_BLOOD_PACK)
unregistersymbol(bloodPack)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+265BB09

"ds.exe"+265BAE1: 76 0A                    -  jna ds.exe+265BAED
"ds.exe"+265BAE3: C5 FA 5C D6              -  vsubss xmm2,xmm0,xmm6
"ds.exe"+265BAE7: C5 F0 57 C9              -  vxorps xmm1,xmm1,xmm1
"ds.exe"+265BAEB: EB 0C                    -  jmp ds.exe+265BAF9
"ds.exe"+265BAED: C5 CA 5C C8              -  vsubss xmm1,xmm6,xmm0
"ds.exe"+265BAF1: C5 F8 28 F0              -  vmovaps xmm6,xmm0
"ds.exe"+265BAF5: C5 E8 57 D2              -  vxorps xmm2,xmm2,xmm2
"ds.exe"+265BAF9: C5 F8 2F CF              -  vcomiss xmm1,xmm0,xmm7
"ds.exe"+265BAFD: C5 E2 58 C6              -  vaddss xmm0,xmm3,xmm6
"ds.exe"+265BB01: C5 FA 11 83 E4 47 00 00  -  vmovss [rbx+000047E4],xmm0
// ---------- INJECTING HERE ----------
"ds.exe"+265BB09: C5 FA 11 93 D8 47 00 00  -  vmovss [rbx+000047D8],xmm2
// ---------- DONE INJECTING  ----------
"ds.exe"+265BB11: 76 21                    -  jna ds.exe+265BB34
"ds.exe"+265BB13: 48 8B 4B 60              -  mov rcx,[rbx+60]
"ds.exe"+265BB17: 41 B9 01 00 00 00        -  mov r9d,00000001
"ds.exe"+265BB1D: C5 F0 57 0D CB DD 10 01  -  vxorps xmm1,xmm1,[ds.exe+37698F0]
"ds.exe"+265BB25: 45 33 C0                 -  xor r8d,r8d
"ds.exe"+265BB28: 48 8B 89 00 45 00 00     -  mov rcx,[rcx+00004500]
"ds.exe"+265BB2F: E8 9C F9 DD FF           -  call ds.exe+243B4D0
"ds.exe"+265BB34: 48 8B 43 60              -  mov rax,[rbx+60]
"ds.exe"+265BB38: 48 8B 88 E0 44 00 00     -  mov rcx,[rax+000044E0]
"ds.exe"+265BB3F: E8 5C 07 E0 FF           -  call ds.exe+245C2A0
}

DRAIN_ON_HIT:
  db C4 C1 7A 11 86 D8 47 00 00

unregistersymbol(DRAIN_ON_HIT)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+24E7BB5

"ds.exe"+24E7B7C: C4 C1 7A 11 86 E0 47 00 00  -  vmovss [r14+000047E0],xmm0
"ds.exe"+24E7B85: C4 C1 7A 10 86 D8 47 00 00  -  vmovss xmm0,[r14+000047D8]
"ds.exe"+24E7B8E: C4 C1 7A 5C D0              -  vsubss xmm2,xmm0,xmm8
"ds.exe"+24E7B93: C5 F8 2F F2                 -  vcomiss xmm6,xmm0,xmm2
"ds.exe"+24E7B97: C4 C1 7A 11 8E E4 47 00 00  -  vmovss [r14+000047E4],xmm1
"ds.exe"+24E7BA0: 76 06                       -  jna ds.exe+24E7BA8
"ds.exe"+24E7BA2: C5 F8 57 C0                 -  vxorps xmm0,xmm0,xmm0
"ds.exe"+24E7BA6: EB 0D                       -  jmp ds.exe+24E7BB5
"ds.exe"+24E7BA8: C4 C1 7A 10 86 DC 47 00 00  -  vmovss xmm0,[r14+000047DC]
"ds.exe"+24E7BB1: C5 FA 5D C2                 -  vminss xmm0,xmm0,xmm2
// ---------- INJECTING HERE ----------
"ds.exe"+24E7BB5: C4 C1 7A 11 86 D8 47 00 00  -  vmovss [r14+000047D8],xmm0
// ---------- DONE INJECTING  ----------
"ds.exe"+24E7BBE: 48 8B 87 B8 00 00 00        -  mov rax,[rdi+000000B8]
"ds.exe"+24E7BC5: C5 92 58 88 48 03 00 00     -  vaddss xmm1,xmm13,[rax+00000348]
"ds.exe"+24E7BCD: C5 FA 11 8F D4 00 00 00     -  vmovss [rdi+000000D4],xmm1
"ds.exe"+24E7BD5: C5 78 28 94 24 E0 01 00 00  -  vmovaps xmm10,[rsp+000001E0]
"ds.exe"+24E7BDE: C5 78 28 8C 24 F0 01 00 00  -  vmovaps xmm9,[rsp+000001F0]
"ds.exe"+24E7BE7: C5 78 28 A4 24 C0 01 00 00  -  vmovaps xmm12,[rsp+000001C0]
"ds.exe"+24E7BF0: C5 FA 10 87 D4 00 00 00     -  vmovss xmm0,[rdi+000000D4]
"ds.exe"+24E7BF8: C5 F8 2F C6                 -  vcomiss xmm0,xmm0,xmm6
"ds.exe"+24E7BFC: C5 78 28 AC 24 B0 01 00 00  -  vmovaps xmm13,[rsp+000001B0]
"ds.exe"+24E7C05: 76 0D                       -  jna ds.exe+24E7C14
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>29</ID>
          <Description>"No Chiralium Loss When Shooting"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-07-20
  Author : gregory

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(NO_CHIRALIUM_SHOOT_COST,ds.exe,C1 44 89 02 48 85 DB) // should be unique
alloc(newmem,$1000,"ds.exe"+2598BDC)

label(code)
label(return)

newmem:

code:
  cmp [rdx],r8d
  jg out
  mov [rdx],r8d
out:
  test rbx,rbx
  jmp return

NO_CHIRALIUM_SHOOT_COST+01:
  jmp newmem
  nop
return:
registersymbol(NO_CHIRALIUM_SHOOT_COST)

[DISABLE]

NO_CHIRALIUM_SHOOT_COST+01:
  db 44 89 02 48 85 DB

unregistersymbol(NO_CHIRALIUM_SHOOT_COST)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+2598BDC

"ds.exe"+2598BB9: 48 8D 97 A8 23 00 00  -  lea rdx,[rdi+000023A8]
"ds.exe"+2598BC0: 48 8D 0C C0           -  lea rcx,[rax+rax*8]
"ds.exe"+2598BC4: 4D 8D 0C C9           -  lea r9,[r9+rcx*8]
"ds.exe"+2598BC8: 48 8D 14 CA           -  lea rdx,[rdx+rcx*8]
"ds.exe"+2598BCC: 8B 0A                 -  mov ecx,[rdx]
"ds.exe"+2598BCE: 03 CE                 -  add ecx,esi
"ds.exe"+2598BD0: 78 0A                 -  js ds.exe+2598BDC
"ds.exe"+2598BD2: 41 3B 09              -  cmp ecx,[r9]
"ds.exe"+2598BD5: 41 0F 4F 09           -  cmovg ecx,[r9]
"ds.exe"+2598BD9: 44 8B C1              -  mov r8d,ecx
// ---------- INJECTING HERE ----------
"ds.exe"+2598BDC: 44 89 02              -  mov [rdx],r8d
"ds.exe"+2598BDF: 48 85 DB              -  test rbx,rbx
// ---------- DONE INJECTING  ----------
"ds.exe"+2598BE2: 74 09                 -  je ds.exe+2598BED
"ds.exe"+2598BE4: 48 8B CB              -  mov rcx,rbx
"ds.exe"+2598BE7: FF 15 EB 98 19 01     -  call qword ptr [ds.exe+37324D8]
"ds.exe"+2598BED: 48 8B 5C 24 30        -  mov rbx,[rsp+30]
"ds.exe"+2598BF2: 48 8B 74 24 38        -  mov rsi,[rsp+38]
"ds.exe"+2598BF7: 48 83 C4 20           -  add rsp,20
"ds.exe"+2598BFB: 5F                    -  pop rdi
"ds.exe"+2598BFC: C3                    -  ret 
"ds.exe"+2598BFD: CC                    -  int 3 
"ds.exe"+2598BFE: CC                    -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>985</ID>
          <Description>"Infinite Magazine Ammo"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
aobscanmodule(magdec,ds.exe,66 ?? ?? ?? 0F B6 ?? ?? 2C ?? 3C ?? 0F 87)
registersymbol(magdec)

magdec:
db 90 90 90 90

[disable]
magdec:
db 66 44 89 30

unregistersymbol(magdec)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>965</ID>
      <Description>"Position"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>552</ID>
          <Description>"Player"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-08-15
  Author : SenorPlebeian

  This script grabs the coordinates of the player that
  you can alter to move Sam's position
}

[ENABLE]

aobscanmodule(GRABPLAYERCOORDINATES,ds.exe,C5 FA 10 82 80 00 00 00 * * * * C4) // should be unique
alloc(newmem,$1000,"ds.exe"+19C3DA1)
alloc(coordinates, 8)
registersymbol(coordinates)
label(code)
label(return)

newmem:

code:
  mov [coordinates], rdx
  vmovss xmm0,[rdx+00000080]
  jmp return

GRABPLAYERCOORDINATES:
  jmp newmem
  nop 3
return:
registersymbol(GRABPLAYERCOORDINATES)

[DISABLE]

GRABPLAYERCOORDINATES:
  db C5 FA 10 82 80 00 00 00

unregistersymbol(GRABPLAYERCOORDINATES)
unregistersymbol(coordinates)
dealloc(coordinates)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+19C3DA1

"ds.exe"+19C3D6C: C5 E8 58 C6                 -  vaddps xmm0,xmm2,xmm6
"ds.exe"+19C3D70: C5 F8 28 74 24 60           -  vmovaps xmm6,[rsp+60]
"ds.exe"+19C3D76: 49 8B C0                    -  mov rax,r8
"ds.exe"+19C3D79: C5 F8 58 E2                 -  vaddps xmm4,xmm0,xmm2
"ds.exe"+19C3D7D: C5 F2 59 15 3B FB D9 01     -  vmulss xmm2,xmm1,[ds.exe+37638C0]
"ds.exe"+19C3D85: C5 EA 58 05 07 38 DB 01     -  vaddss xmm0,xmm2,[ds.exe+3777594]
"ds.exe"+19C3D8D: C5 C2 5A D7                 -  vcvtss2sd xmm2,xmm7,xmm7
"ds.exe"+19C3D91: C5 F8 28 7C 24 50           -  vmovaps xmm7,[rsp+50]
"ds.exe"+19C3D97: C5 E0 57 DB                 -  vxorps xmm3,xmm3,xmm3
"ds.exe"+19C3D9B: C4 E3 61 21 D8 20           -  unknown avx 0F3A 21 xmm3,xmm3,xmm0,20
// ---------- INJECTING HERE ----------
"ds.exe"+19C3DA1: C5 FA 10 82 80 00 00 00     -  vmovss xmm0,[rdx+00000080]
// ---------- DONE INJECTING  ----------
"ds.exe"+19C3DA9: C5 FA 5A C0                 -  vcvtss2sd xmm0,xmm0,xmm0
"ds.exe"+19C3DAD: C4 C1 7B 58 C8              -  vaddsd xmm1,xmm0,xmm8
"ds.exe"+19C3DB2: C5 D8 58 EB                 -  vaddps xmm5,xmm4,xmm3
"ds.exe"+19C3DB6: C5 D2 5A C5                 -  vcvtss2sd xmm0,xmm5,xmm5
"ds.exe"+19C3DBA: C5 F3 5C C8                 -  vsubsd xmm1,xmm1,xmm0
"ds.exe"+19C3DBE: C4 C1 7B 11 08              -  vmovsd [r8],xmm1
"ds.exe"+19C3DC3: C5 D0 C6 C5 55              -  vshufps xmm0,xmm5,xmm5,55
"ds.exe"+19C3DC8: C4 41 39 15 C0              -  vunpckhpd xmm8,xmm8,xmm8
"ds.exe"+19C3DCD: C4 C1 6B 58 C8              -  vaddsd xmm1,xmm2,xmm8
"ds.exe"+19C3DD2: C5 78 28 44 24 40           -  vmovaps xmm8,[rsp+40]
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>960</ID>
              <Description>"XYZ"</Description>
              <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">63 6F B4 44 8F 3C 41 44 4E 1D 14 43:[Eastern Region] Capital Knot
17 BD 06 44 90 DE B0 43 03 58 6E 43:[Eastern Region] Incincerator
99 37 9D 43 C9 1A 91 44 B4 F3 22 43:[Eastern Region] Waystation
6C DB D6 C3 70 54 A9 43 AC 2F 14 43:[Eastern Region] Distribution Center
ED 38 BF 42 60 FA 06 44 85 20 4F 43:[Eastern Region] Ludens Fan
26 23 BA C4 F0 60 24 44 15 92 4D 43:[Eastern Region] Wind Farm
A5 9D 74 C4 DB 4A EC C2 9D 8C 38 43:[Eastern Region] Musician
85 F0 BC C4 CA 89 D1 C0 01 25 9F 43:[Eastern Region] Top of Mountain
17 47 F0 C4 74 57 FE C3 27 4A 16 43:[Eastern Region] Port Knot
1B 19 AF 43 B0 A2 4A 44 E3 17 24 43:[Eastern Region] Mule Outpost (East)
0C 46 1C C4 D5 8C D0 C2 DD 03 5F 43:[Eastern Region] Mule Outpost (West)
:--------------------
FD FE 20 45 86 2D F2 44 F5 4A 5C 43:[Central Region] Lake Knot
71 EF D9 44 3C 73 F6 44 B3 76 53 43:[Central Region] Peter Englert
96 83 08 45 72 C4 94 44 9D 4B 32 43:[Central Region] Engineer
20 49 99 44 03 E1 A3 44 FC CB 38 43:[Central Region] Craftsman
BD BF D4 44 63 5B 2F 44 51 48 75 43:[Central Region] Elder
DD D7 A5 44 BB 82 DF 44 8E 2A 48 43:[Central Region] Middle Knot
F9 6F 75 44 61 7B D2 43 32 4A 1B 43:[Central Region] Distribution Center
FF 9F 37 42 0B D2 93 C2 01 8D 9B 43:[Central Region] Weather Station
68 38 8F 44 3D 9B E2 41 58 50 07 43:[Central Region] Collector
11 7C F9 44 1C DB A8 C1 21 66 19 43:[Central Region] Film Director
D4 C5 C9 44 B0 DD 89 C3 02 6D 08 43:[Central Region] Junk Dealer
76 2B 06 45 27 AC 63 C4 A2 7A 1C 43:[Central Region] Chiral Artist
6B C6 34 44 A1 68 26 C4 0D 6A CB 42:[Central Region] Cosplayer
B3 93 7E 44 95 EC 74 C4 6C 0D 23 43:[Central Region] Mama's Lab
7C CD AD 44 5A 80 97 C4 4B 17 16 43:[Central Region] South Knot
7C FB C6 42 D2 D9 C9 C4 9E 74 DB 42:[Central Region] Timefall Farm
D8 B3 CA 43 70 6E 03 C5 AD 01 8E 43:[Central Region] Torii
5D 40 12 45 54 9F AB 44 8E C2 36 43:[Central Region] Mule Outpost (East)
92 66 CA 44 C0 4E 85 44 BF 3E 30 43:[Central Region] Mule Outpost A (Southeast)
CC 73 D1 44 54 72 70 44 AC 6B 2F 43:[Central Region] Mule Outpost B (Southeast)
08 92 BD 44 38 C5 77 44 0E DC 2C 43:[Central Region] Mule Outpost C (Southeast)
4A AF 06 44 53 D4 5D 44 E1 3E 2E 43:[Central Region] Mule Outpost (West)
83 C8 B5 44 B9 8D 51 43 CB 97 06 43:[Central Region] Mule Outpost A (Southwest)
9E CC B0 44 2D 74 0C 42 2F 8E 02 43:[Central Region] Mule Outpost B (Southwest)
64 82 A5 44 56 71 CA C2 5F 9C 06 43:[Central Region] Mule Outpost C (Southwest)
D2 72 90 43 46 BC 99 C4 6E EA D0 42:[Central Region] Mule Outpost A (South)
42 22 42 C2 F9 1E 9E C4 27 E4 EB 42:[Central Region] Mule Outpost B (South)
:--------------------
6E C8 31 43 87 8E CD 44 AB B5 82 43:[Mountain Region] Waystation
DF 9D A3 C3 09 E1 09 45 EA FF 5A 43:[Mountain Region] Incinerator
67 2B DB C4 84 D7 F5 44 68 D4 6D 43:[Mountain Region] Distribution Center
9A 77 92 C4 5F 1D 8D 43 0B 13 B6 43:[Mountain Region] Mountain Knot
11 8F B2 C4 58 AC 77 42 9B 4F B4 43:[Mountain Region] Doctor
F9 9F 21 C4 4D 26 0D C3 93 25 06 44:[Mountain Region] Roboticist
11 6D 67 C4 4C CE 84 44 30 F9 15 44:[Mountain Region] Mountaineer
34 49 07 C5 14 BE 17 44 E1 17 85 43:[Mountain Region] Photographer
D6 37 A1 C3 71 62 76 44 D6 4C 38 44:[Mountain Region] Spiritualist
DD 6F 59 C3 53 67 34 44 24 12 45 44:[Mountain Region] First Prepper
20 F1 97 C4 44 BE 5F C3 B7 35 05 44:[Mountain Region] Heartman's Lab
6D 29 60 C4 09 73 44 C4 0D 66 1C 44:[Mountain Region] Geologist
35 CF 9A C4 DD 29 9C C4 24 20 CE 43:[Mountain Region] Paleontologist
CF F3 E4 C4 8A 70 31 C4 76 82 E9 43:[Mountain Region] Evo-Devo Biologist
60 4D 18 C5 B1 63 A1 44 7C EC 7A 43:[Mountain Region] Novelist's Son
DC 6D CF C3 82 A0 91 C4 84 EB 7A 43:[Mountain Region] Veteran Porter
0F 09 20 C5 2C 40 FB C4 17 0C BC 42:[Mountain Region] Chiral Relay
FE 0F E5 C4 DF 10 50 C4 9A 2E C2 43:[Mountain Region] Recharging Spring
3E E0 0C C5 01 22 6B 44 9F 77 54 43:[Mountain Region] World's End Miracle Pool
BF 93 3D C4 B9 61 E2 44 26 52 60 43:[Mountain Region] Terrorist Outpost A (East)
25 61 55 C4 D7 E7 EF 44 19 12 60 43:[Mountain Region] Terrorist Outpost B (East)
C9 B1 D3 C4 82 C8 87 44 4C 6B 5C 43:[Mountain Region] Terrorist Outpost A (Northeast)
8E A4 FE C4 02 7B 9F 44 ED D3 5F 43:[Mountain Region] Terrorist Outpost B (Northeast)
25 2C C2 C4 23 36 A0 44 73 8D 71 43:[Mountain Region] Terrorist Outpost C (Northeast)
F2 5F EC C4 A9 E9 B1 C4 C0 EE 9E 43:[Mountain Region] Terrorist Outpost A (South)
E4 89 F6 C4 36 EB 99 C4 42 97 9F 43:[Mountain Region] Terrorist Outpost B (South)
57 60 FE C4 32 9B BB C4 26 E2 8F 43:[Mountain Region] Terrorist Outpost C (South)
:--------------------
8F C0 FD C2 C2 6C 67 44 8C 2E DC 42:[Western Region] Distribution Center
C9 8C 15 C4 E5 53 56 43 1F 0D DD 42:[Western Region] Edge Knot
</DropDownList>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Array of byte</VariableType>
              <ByteLength>12</ByteLength>
              <Address>coordinates</Address>
              <Offsets>
                <Offset>80</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>961</ID>
                  <Description>"X"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>+0</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>962</ID>
                  <Description>"Y"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>963</ID>
                  <Description>"Z"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>+8</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>939</ID>
              <Description>"Last Attached Carrier"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-08-21
  Author : SenorPlebeian

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(LASTATTACHEDCARRIER,ds.exe,C4 C1 78 10 85 C8 00 00 00 C4 E3) // should be unique
alloc(newmem,$1000,"ds.exe"+23F5661)
alloc(last_attached_carrier, 8)
registersymbol(last_attached_carrier)
label(code)
label(return)

newmem:
  mov [last_attached_carrier], r13
code:
  vmovups xmm0,[r13+000000C8]
  jmp return

LASTATTACHEDCARRIER:
  jmp newmem
  nop 4
return:
registersymbol(LASTATTACHEDCARRIER)

[DISABLE]

LASTATTACHEDCARRIER:
  db C4 C1 78 10 85 C8 00 00 00

unregistersymbol(LASTATTACHEDCARRIER)
unregistersymbol(last_attached_carrier)
dealloc(last_attached_carrier)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+23F5661

"ds.exe"+23F5619: C4 E3 79 40 DC 7F                    -  vdpps xmm3,xmm0,xmm4,7F
"ds.exe"+23F561F: C5 FB 10 84 24 78 01 00 00           -  vmovsd xmm0,[rsp+00000178]
"ds.exe"+23F5628: C4 E3 79 21 84 24 80 01 00 00 20     -  unknown avx 0F3A 21 xmm0,xmm0,[rsp+00000180],20
"ds.exe"+23F5633: C4 C1 72 10 CA                       -  vmovss xmm1,xmm1,xmm10
"ds.exe"+23F5638: C5 F8 11 8C 24 00 01 00 00           -  vmovups [rsp+00000100],xmm1
"ds.exe"+23F5641: 45 33 F6                             -  xor r14d,r14d
"ds.exe"+23F5644: C7 84 24 F8 00 00 00 08 00 00 00     -  mov [rsp+000000F8],00000008
"ds.exe"+23F564F: C4 E3 79 40 C4 7F                    -  vdpps xmm0,xmm0,xmm4,7F
"ds.exe"+23F5655: C4 E3 71 40 D4 7F                    -  vdpps xmm2,xmm1,xmm4,7F
"ds.exe"+23F565B: C4 E3 79 21 CA 10                    -  unknown avx 0F3A 21 xmm1,xmm0,xmm2,10
// ---------- INJECTING HERE ----------
"ds.exe"+23F5661: C4 C1 78 10 85 C8 00 00 00           -  vmovups xmm0,[r13+000000C8]
// ---------- DONE INJECTING  ----------
"ds.exe"+23F566A: C4 E3 71 21 DB 20                    -  unknown avx 0F3A 21 xmm3,xmm1,xmm3,20
"ds.exe"+23F5670: C4 C1 7B 10 8D D8 00 00 00           -  vmovsd xmm1,[r13+000000D8]
"ds.exe"+23F5679: 48 8D 05 C8 E1 38 01                 -  lea rax,[ds.exe+3783848]
"ds.exe"+23F5680: 48 C7 84 24 FC 00 00 00 FF 00 00 00  -  mov qword ptr [rsp+000000FC],000000FF
"ds.exe"+23F568C: C4 C1 78 28 FD                       -  vmovaps xmm7,xmm13
"ds.exe"+23F5691: C5 C0 C6 FF 00                       -  vshufps xmm7,xmm7,xmm7,00
"ds.exe"+23F5696: C5 F8 11 84 24 90 00 00 00           -  vmovups [rsp+00000090],xmm0
"ds.exe"+23F569F: C5 C0 59 C4                          -  vmulps xmm0,xmm7,xmm4
"ds.exe"+23F56A3: C5 F8 11 84 24 D0 00 00 00           -  vmovups [rsp+000000D0],xmm0
"ds.exe"+23F56AC: C5 7A 11 A4 24 D8 00 00 00           -  vmovss [rsp+000000D8],xmm12
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>935</ID>
                  <Description>"XYZ"</Description>
                  <Options moRecursiveSetValue="1"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Array of byte</VariableType>
                  <ByteLength>24</ByteLength>
                  <Address>last_attached_carrier</Address>
                  <Offsets>
                    <Offset>C8</Offset>
                  </Offsets>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <Value>(Player X)</Value>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Increase Value</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>964</ID>
                  <Description>"X"</Description>
                  <Options moRecursiveSetValue="1"/>
                  <VariableType>Double</VariableType>
                  <Address>last_attached_carrier</Address>
                  <Offsets>
                    <Offset>C8</Offset>
                  </Offsets>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <Value>(Player X)</Value>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Increase Value</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>936</ID>
                  <Description>"Y"</Description>
                  <Options moRecursiveSetValue="1"/>
                  <VariableType>Double</VariableType>
                  <Address>last_attached_carrier</Address>
                  <Offsets>
                    <Offset>D0</Offset>
                  </Offsets>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <Value>(Player Y)</Value>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Increase Value</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>937</ID>
                  <Description>"Z"</Description>
                  <Options moRecursiveSetValue="1"/>
                  <VariableType>Double</VariableType>
                  <Address>last_attached_carrier</Address>
                  <Offsets>
                    <Offset>D8</Offset>
                  </Offsets>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <Value>(Player Z)</Value>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Increase Value</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <Value>.2</Value>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>565</ID>
          <Description>"Vehicle"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-08-15
  Author : SenorPlebeian

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(GRAB_VEHICLE_COORDS,ds.exe,1F * * * * C8 00 00 00 C5 F8 11 87 78 08 00 00) // should be unique
alloc(newmem,$1000,"ds.exe"+2BF86A6)
alloc(vehcoordinates, 8)
registersymbol(vehcoordinates)
label(code)
label(return)

newmem:
  mov [vehcoordinates], rdi
code:
  vmovups [rdi+00000878],xmm0
  jmp return

GRAB_VEHICLE_COORDS+09:
  jmp newmem
  nop 3
return:
registersymbol(GRAB_VEHICLE_COORDS)

[DISABLE]

GRAB_VEHICLE_COORDS+09:
  db C5 F8 11 87 78 08 00 00

unregistersymbol(GRAB_VEHICLE_COORDS)
unregistersymbol(vehcoordinates)
dealloc(vehcoordinates)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+2BF86A6

"ds.exe"+2BF8669: 48 8D 8F 90 08 00 00     -  lea rcx,[rdi+00000890]
"ds.exe"+2BF8670: C5 F8 28 74 24 30        -  vmovaps xmm6,[rsp+30]
"ds.exe"+2BF8676: 48 8B 5C 24 50           -  mov rbx,[rsp+50]
"ds.exe"+2BF867B: 74 21                    -  je ds.exe+2BF869E
"ds.exe"+2BF867D: C5 F8 10 87 F8 08 00 00  -  vmovups xmm0,[rdi+000008F8]
"ds.exe"+2BF8685: C5 F8 11 87 78 08 00 00  -  vmovups [rdi+00000878],xmm0
"ds.exe"+2BF868D: C5 FB 10 8F 08 09 00 00  -  vmovsd xmm1,[rdi+00000908]
"ds.exe"+2BF8695: 48 8D 87 10 09 00 00     -  lea rax,[rdi+00000910]
"ds.exe"+2BF869C: EB 1F                    -  jmp ds.exe+2BF86BD
"ds.exe"+2BF869E: C5 F8 10 87 C8 00 00 00  -  vmovups xmm0,[rdi+000000C8]
// ---------- INJECTING HERE ----------
"ds.exe"+2BF86A6: C5 F8 11 87 78 08 00 00  -  vmovups [rdi+00000878],xmm0
// ---------- DONE INJECTING  ----------
"ds.exe"+2BF86AE: C5 FB 10 8F D8 00 00 00  -  vmovsd xmm1,[rdi+000000D8]
"ds.exe"+2BF86B6: 48 8D 87 E0 00 00 00     -  lea rax,[rdi+000000E0]
"ds.exe"+2BF86BD: C5 FB 11 8F 88 08 00 00  -  vmovsd [rdi+00000888],xmm1
"ds.exe"+2BF86C5: 48 3B C8                 -  cmp rcx,rax
"ds.exe"+2BF86C8: 74 0E                    -  je ds.exe+2BF86D8
"ds.exe"+2BF86CA: C5 FC 10 00              -  vmovups ymm0,[rax]
"ds.exe"+2BF86CE: C5 FC 11 01              -  vmovups [rcx],ymm0
"ds.exe"+2BF86D2: 8B 40 20                 -  mov eax,[rax+20]
"ds.exe"+2BF86D5: 89 41 20                 -  mov [rcx+20],eax
"ds.exe"+2BF86D8: 83 8F 38 05 00 00 04     -  or dword ptr [rdi+00000538],04
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>566</ID>
              <Description>"XYZ"</Description>
              <Options moRecursiveSetValue="1"/>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>Array of byte</VariableType>
              <ByteLength>24</ByteLength>
              <Address>vehcoordinates</Address>
              <Offsets>
                <Offset>878</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>99</Key>
                  </Keys>
                  <Value>(WayX)</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
              <CheatEntries>
                <CheatEntry>
                  <ID>575</ID>
                  <Description>"XYZ"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Array of byte</VariableType>
                  <ByteLength>24</ByteLength>
                  <Address>-7B0</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <Value>(WayX)</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>970</ID>
              <Description>"X"</Description>
              <Options moRecursiveSetValue="1"/>
              <VariableType>Double</VariableType>
              <Address>vehcoordinates</Address>
              <Offsets>
                <Offset>878</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>99</Key>
                  </Keys>
                  <Value>(WayX)</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
              <CheatEntries>
                <CheatEntry>
                  <ID>971</ID>
                  <Description>"X"</Description>
                  <VariableType>Double</VariableType>
                  <Address>-7B0</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <Value>(WayX)</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>573</ID>
              <Description>"Y"</Description>
              <Options moRecursiveSetValue="1"/>
              <VariableType>Double</VariableType>
              <Address>vehcoordinates</Address>
              <Offsets>
                <Offset>880</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>99</Key>
                  </Keys>
                  <Value>(WayY)</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
              <CheatEntries>
                <CheatEntry>
                  <ID>576</ID>
                  <Description>"Y"</Description>
                  <VariableType>Double</VariableType>
                  <Address>-7B0</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <Value>(WayY)</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>574</ID>
              <Description>"Z"</Description>
              <Options moRecursiveSetValue="1"/>
              <VariableType>Double</VariableType>
              <Address>vehcoordinates</Address>
              <Offsets>
                <Offset>888</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>99</Key>
                  </Keys>
                  <Value>(WayZ)</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
              <CheatEntries>
                <CheatEntry>
                  <ID>577</ID>
                  <Description>"Z"</Description>
                  <VariableType>Double</VariableType>
                  <Address>-7B0</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <Value>(WayZ)</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>581</ID>
          <Description>"Last Waypoint"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-08-18
  Author : SenorPlebeian

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(GRABWAYPOINT,ds.exe,C5 F9 7F 43 10 88) // should be unique
alloc(newmem,$1000,"ds.exe"+1B7FE048)
alloc(last_waypoint, 8)
registersymbol(last_waypoint)
label(code)
label(return)

newmem:
  mov [last_waypoint], rbx
code:
  vmovdqa [rbx+10],xmm0
  jmp return

GRABWAYPOINT:
  jmp newmem
return:
registersymbol(GRABWAYPOINT)

[DISABLE]

GRABWAYPOINT:
  db C5 F9 7F 43 10

unregistersymbol(GRABWAYPOINT)
unregistersymbol(last_waypoint)
dealloc(last_waypoint)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+1B7FE048

"ds.exe"+1B7FE028: 89 4B 28                 -  mov [rbx+28],ecx
"ds.exe"+1B7FE02B: 89 C8                    -  mov eax,ecx
"ds.exe"+1B7FE02D: C1 E8 02                 -  shr eax,02
"ds.exe"+1B7FE030: A8 01                    -  test al,01
"ds.exe"+1B7FE032: 75 06                    -  jne ds.exe+1B7FE03A
"ds.exe"+1B7FE034: 83 C9 04                 -  or ecx,04
"ds.exe"+1B7FE037: 89 4B 28                 -  mov [rbx+28],ecx
"ds.exe"+1B7FE03A: C5 F8 10 07              -  vmovups xmm0,[rdi]
"ds.exe"+1B7FE03E: 0F B6 4C 24 60           -  movzx ecx,byte ptr [rsp+60]
"ds.exe"+1B7FE043: 0F B6 44 24 68           -  movzx eax,byte ptr [rsp+68]
// ---------- INJECTING HERE ----------
"ds.exe"+1B7FE048: C5 F9 7F 43 10           -  vmovdqa [rbx+10],xmm0
// ---------- DONE INJECTING  ----------
"ds.exe"+1B7FE04D: 88 43 43                 -  mov [rbx+43],al
"ds.exe"+1B7FE050: 88 4B 41                 -  mov [rbx+41],cl
"ds.exe"+1B7FE053: 88 4B 42                 -  mov [rbx+42],cl
"ds.exe"+1B7FE056: 44 88 73 4C              -  mov [rbx+4C],r14l
"ds.exe"+1B7FE05A: 44 88 7B 4D              -  mov [rbx+4D],r15l
"ds.exe"+1B7FE05E: 8B 86 F0 5E 00 00        -  mov eax,[rsi+00005EF0]
"ds.exe"+1B7FE064: 83 C8 04                 -  or eax,04
"ds.exe"+1B7FE067: 89 86 F0 5E 00 00        -  mov [rsi+00005EF0],eax
"ds.exe"+1B7FE06D: 84 C9                    -  test cl,cl
"ds.exe"+1B7FE06F: 74 0A                    -  je ds.exe+1B7FE07B
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>582</ID>
              <Description>"WayXYZ"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Array of byte</VariableType>
              <ByteLength>12</ByteLength>
              <Address>last_waypoint</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>972</ID>
              <Description>"WayX"</Description>
              <VariableType>Float</VariableType>
              <Address>last_waypoint</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>583</ID>
              <Description>"WayY"</Description>
              <VariableType>Float</VariableType>
              <Address>last_waypoint</Address>
              <Offsets>
                <Offset>14</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>584</ID>
              <Description>"WayZ"</Description>
              <VariableType>Float</VariableType>
              <Address>last_waypoint</Address>
              <Offsets>
                <Offset>18</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>959</ID>
          <Description>"Teleport Vehicle to Waypoint"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
function teleportVehicleGracefully(waypointcoordinate, vcoordinate)
  local x = readFloat(waypointcoordinate+16)
  local y = readFloat(waypointcoordinate+20)
  local z = readFloat(waypointcoordinate+24)

  local currentVehicleZ = readDouble(vcoordinate + 16)
  local rec = getAddressList().getMemoryRecordByDescription("Teleport Vehicle to Waypoint")

  if thistimer == nil then
    thistimer = createTimer(nil, false)
  end
  thistimer.Interval = 250
  thistimer.OnTimer = function(timer)
    if currentVehicleZ &gt; (z + 5) and z ~= 0 then
      currentVehicleZ = currentVehicleZ - 5
      writeDouble(vcoordinate + 16, currentVehicleZ)
      writeDouble(vcoordinate - 1952, currentVehicleZ)
      -- print (currentVehicleZ)
    else
      if (z ~= 0) then
        writeDouble(vcoordinate + 16, z)
        writeDouble(vcoordinate - 1952, z)
      end
      if x ~= 0 then
        writeDouble(vcoordinate, x)
        writeDouble(vcoordinate - 1968, x)
        writeDouble(vcoordinate + 8, y)
        writeDouble(vcoordinate - 1960, y)
      end
      -- print ("Done")
      rec.Active = false
      thistimer.setEnabled(false)
    end
  end
  thistimer.setEnabled(true)

  if currentVehicleZ &lt;= (z + 5) then
    writeDouble(vcoordinate + 16, z)
    writeDouble(vcoordinate - 1952, z)
  end
end

function init()
  local waypointcoordinate = getAddressSafe("last_waypoint")
  local vcoordinate = getAddressSafe("vehcoordinates")
  waypointcoordinate = readQword(waypointcoordinate)
  vcoordinate = readQword(vcoordinate) + 2168
  teleportVehicleGracefully(waypointcoordinate, vcoordinate)
end

function initDisable()
  if thistimer ~= nil then
    thistimer.setEnabled(false)
  end
end
[ENABLE]
init()
[DISABLE]
initDisable()
</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>98</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>966</ID>
      <Description>"Battery / Durability"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>96</ID>
          <Description>"No Exo Battery Drain"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version:
  Date   : 2020-09-18
  Author : 19712

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,ds.exe,C5 FA 11 96 B0 00 00 00) // should be unique
alloc(newmem,$1000,"ds.exe"+262A4D7)

label(code)
label(return)

newmem:

code:
  vmovss [rsi+000000B0],xmm0
  jmp return

INJECT:
  jmp newmem
  nop 3
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db C5 FA 11 96 B0 00 00 00

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+262A4D7

"ds.exe"+262A4A4: 32 C0                          -  xor al,al
"ds.exe"+262A4A6: C4 C1 78 2F F4                 -  vcomiss xmm6,xmm0,xmm12
"ds.exe"+262A4AB: C5 FA 11 B6 9C 47 00 00        -  vmovss [rsi+0000479C],xmm6
"ds.exe"+262A4B3: 76 4D                          -  jna ds.exe+262A502
"ds.exe"+262A4B5: C7 86 98 47 00 00 00 00 00 40  -  mov [rsi+00004798],40000000
"ds.exe"+262A4BF: 45 33 F6                       -  xor r14d,r14d
"ds.exe"+262A4C2: C5 FA 10 86 B0 47 00 00        -  vmovss xmm0,[rsi+000047B0]
"ds.exe"+262A4CA: C5 FA 5C CE                    -  vsubss xmm1,xmm0,xmm6
"ds.exe"+262A4CE: C4 C1 72 5F D4                 -  vmaxss xmm2,xmm1,xmm12
"ds.exe"+262A4D3: C5 78 2F E2                    -  vcomiss xmm12,xmm0,xmm2
// ---------- INJECTING HERE ----------
"ds.exe"+262A4D7: C5 FA 11 96 B0 47 00 00        -  vmovss [rsi+000047B0],xmm2
// ---------- DONE INJECTING  ----------
"ds.exe"+262A4DF: 0F 82 D9 00 00 00              -  jb ds.exe+262A5BE
"ds.exe"+262A4E5: C5 FA 10 86 A4 47 00 00        -  vmovss xmm0,[rsi+000047A4]
"ds.exe"+262A4ED: C5 FA 59 0D 77 43 14 01        -  vmulss xmm1,xmm0,[ds.exe+376E86C]
"ds.exe"+262A4F5: C5 FA 11 8E C0 4A 00 00        -  vmovss [rsi+00004AC0],xmm1
"ds.exe"+262A4FD: E9 BC 00 00 00                 -  jmp ds.exe+262A5BE
"ds.exe"+262A502: C5 FA 10 86 98 47 00 00        -  vmovss xmm0,[rsi+00004798]
"ds.exe"+262A50A: C4 C1 78 2F C4                 -  vcomiss xmm0,xmm0,xmm12
"ds.exe"+262A50F: 76 15                          -  jna ds.exe+262A526
"ds.exe"+262A511: C4 C1 7A 5C C1                 -  vsubss xmm0,xmm0,xmm9
"ds.exe"+262A516: C5 FA 11 86 98 47 00 00        -  vmovss [rsi+00004798],xmm0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>97</ID>
          <Description>"No Vehicle Battery Drain"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-09-21
  Author : 19712

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,ds.exe,C5 FA 11 5B 08 EB 1B 4C 8B 0F C5 FA 10 13) // should be unique
alloc(newmem,$1000,"ds.exe"+2C2D879)

label(code)
label(return)
label(maxbat)
newmem:


code:
movss xmm3,[rbx+0C]
vmovss [rbx+08],xmm3
jmp return
maxbat:
dq 0
INJECT:
  jmp newmem
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db C5 FA 11 5B 08 EB 1B 4C 8B 0F C5 FA 10 13

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+2C2C899

"ds.exe"+2C2C872: E8 49 FB FF FF                 -  call ds.exe+2C2C3C0
"ds.exe"+2C2C877: C4 C1 78 2F C3                 -  vcomiss xmm0,xmm0,xmm11
"ds.exe"+2C2C87C: 76 04                          -  jna ds.exe+2C2C882
"ds.exe"+2C2C87E: C5 C2 59 F8                    -  vmulss xmm7,xmm7,xmm0
"ds.exe"+2C2C882: F6 43 44 02                    -  test byte ptr [rbx+44],02
"ds.exe"+2C2C886: 75 18                          -  jne ds.exe+2C2C8A0
"ds.exe"+2C2C888: C5 FA 10 43 08                 -  vmovss xmm0,[rbx+08]
"ds.exe"+2C2C88D: C5 B2 59 CF                    -  vmulss xmm1,xmm9,xmm7
"ds.exe"+2C2C891: C5 FA 5C D1                    -  vsubss xmm2,xmm0,xmm1
"ds.exe"+2C2C895: C5 EA 5F DE                    -  vmaxss xmm3,xmm2,xmm6
// ---------- INJECTING HERE ----------
"ds.exe"+2C2C899: C5 FA 11 5B 08                 -  vmovss [rbx+08],xmm3
// ---------- DONE INJECTING  ----------
"ds.exe"+2C2C89E: EB 05                          -  jmp ds.exe+2C2C8A5
"ds.exe"+2C2C8A0: C5 FA 10 5B 08                 -  vmovss xmm3,[rbx+08]
"ds.exe"+2C2C8A5: C5 F8 2F F3                    -  vcomiss xmm6,xmm0,xmm3
"ds.exe"+2C2C8A9: 72 35                          -  jb ds.exe+2C2C8E0
"ds.exe"+2C2C8AB: C5 78 2F D6                    -  vcomiss xmm10,xmm0,xmm6
"ds.exe"+2C2C8AF: 76 2F                          -  jna ds.exe+2C2C8E0
"ds.exe"+2C2C8B1: 41 8B 86 3C 01 00 00           -  mov eax,[r14+0000013C]
"ds.exe"+2C2C8B8: 89 43 34                       -  mov [rbx+34],eax
"ds.exe"+2C2C8BB: 8B 87 30 08 00 00              -  mov eax,[rdi+00000830]
"ds.exe"+2C2C8C1: 3D FF FF 1F 00                 -  cmp eax,001FFFFF
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>30</ID>
          <Description>"No Boot Durability Loss"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-09-23
  Author : 19712

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,ds.exe,C5 FA 11 9F 0C) // should be unique
alloc(newmem,$1000,"ds.exe"+24F6C4F)

label(code)
label(return)

newmem:

code:
  movss xmm13,[rdi+310]
  vmovss [rdi+0000030C],xmm3
  jmp return

INJECT:
  jmp newmem
  nop 3
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db C5 FA 11 9F 0C 03 00 00

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+24F5CCF

"ds.exe"+24F5C9F: 74 05                    -  je ds.exe+24F5CA6
"ds.exe"+24F5CA1: C4 C1 78 28 F3           -  vmovaps xmm6,xmm11
"ds.exe"+24F5CA6: C5 FA 10 9F 0C 03 00 00  -  vmovss xmm3,[rdi+0000030C]
"ds.exe"+24F5CAE: C5 F8 2F DF              -  vcomiss xmm3,xmm0,xmm7
"ds.exe"+24F5CB2: C5 FA 10 97 1C 03 00 00  -  vmovss xmm2,[rdi+0000031C]
"ds.exe"+24F5CBA: C5 7A 10 4C 24 30        -  vmovss xmm9,[rsp+30]
"ds.exe"+24F5CC0: C5 6A 58 C3              -  vaddss xmm8,xmm2,xmm3
"ds.exe"+24F5CC4: 76 13                    -  jna ds.exe+24F5CD9
"ds.exe"+24F5CC6: C4 C1 62 5C C1           -  vsubss xmm0,xmm3,xmm9
"ds.exe"+24F5CCB: C5 FA 5F DE              -  vmaxss xmm3,xmm0,xmm6
// ---------- INJECTING HERE ----------
"ds.exe"+24F5CCF: C5 FA 11 9F 0C 03 00 00  -  vmovss [rdi+0000030C],xmm3
// ---------- DONE INJECTING  ----------
"ds.exe"+24F5CD7: EB 38                    -  jmp ds.exe+24F5D11
"ds.exe"+24F5CD9: C5 F8 2F D7              -  vcomiss xmm2,xmm0,xmm7
"ds.exe"+24F5CDD: 76 13                    -  jna ds.exe+24F5CF2
"ds.exe"+24F5CDF: C4 C1 6A 5C C1           -  vsubss xmm0,xmm2,xmm9
"ds.exe"+24F5CE4: C5 FA 5F D6              -  vmaxss xmm2,xmm0,xmm6
"ds.exe"+24F5CE8: C5 FA 11 97 1C 03 00 00  -  vmovss [rdi+0000031C],xmm2
"ds.exe"+24F5CF0: EB 1F                    -  jmp ds.exe+24F5D11
"ds.exe"+24F5CF2: C5 FA 10 87 24 03 00 00  -  vmovss xmm0,[rdi+00000324]
"ds.exe"+24F5CFA: C5 F8 2F C7              -  vcomiss xmm0,xmm0,xmm7
"ds.exe"+24F5CFE: 76 11                    -  jna ds.exe+24F5D11
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>108</ID>
          <Description>"No Vehicle Durability Loss"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,ds.exe,C5 FA 11 43 78 * 8B 05) // should be unique
alloc(newmem,$1000,"ds.exe"+2C217F3)

label(code)
label(return)

newmem:

code:
movss xmm13,[rbx+7C]
  vmovss [rbx+78],xmm13
  jmp return

INJECT:
  jmp newmem
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db C5 FA 11 43 78

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+2C217F3

"ds.exe"+2C217CB: C5 BA 5E 41 64           -  vdivss xmm0,xmm8,[rcx+64]
"ds.exe"+2C217D0: C5 FA 59 4B 7C           -  vmulss xmm1,xmm0,[rbx+7C]
"ds.exe"+2C217D5: C4 C1 72 59 D1           -  vmulss xmm2,xmm1,xmm9
"ds.exe"+2C217DA: C5 C2 5C FA              -  vsubss xmm7,xmm7,xmm2
"ds.exe"+2C217DE: C5 F8 2F F7              -  vcomiss xmm6,xmm0,xmm7
"ds.exe"+2C217E2: 76 06                    -  jna ds.exe+2C217EA
"ds.exe"+2C217E4: C5 F8 57 C0              -  vxorps xmm0,xmm0,xmm0
"ds.exe"+2C217E8: EB 09                    -  jmp ds.exe+2C217F3
"ds.exe"+2C217EA: C5 FA 10 43 7C           -  vmovss xmm0,[rbx+7C]
"ds.exe"+2C217EF: C5 FA 5D C7              -  vminss xmm0,xmm0,xmm7
// ---------- INJECTING HERE ----------
"ds.exe"+2C217F3: C5 FA 11 43 78           -  vmovss [rbx+78],xmm0
// ---------- DONE INJECTING  ----------
"ds.exe"+2C217F8: 48 8B 05 19 45 8C 04     -  mov rax,[ds.exe+74E5D18]
"ds.exe"+2C217FF: 0F B6 48 08              -  movzx ecx,byte ptr [rax+08]
"ds.exe"+2C21803: C0 E9 06                 -  shr cl,06
"ds.exe"+2C21806: F6 C1 01                 -  test cl,01
"ds.exe"+2C21809: 0F 85 2D 01 00 00        -  jne ds.exe+2C2193C
"ds.exe"+2C2180F: C5 F8 2F B7 A0 05 00 00  -  vcomiss xmm6,xmm0,[rdi+000005A0]
"ds.exe"+2C21817: C5 FA 10 BB 84 00 00 00  -  vmovss xmm7,[rbx+00000084]
"ds.exe"+2C2181F: 76 38                    -  jna ds.exe+2C21859
"ds.exe"+2C21821: 8B 87 38 05 00 00        -  mov eax,[rdi+00000538]
"ds.exe"+2C21827: C1 E8 1E                 -  shr eax,1E
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113</ID>
          <Description>"No Backpack Luggage Damage"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-09-25
  Author : 19712

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,ds.exe,C5 FA 10 5A 34) // should be unique
alloc(newmem,$1000,"ds.exe"+29707FB)

label(code)
label(return)
label(maxdur)
newmem:

code:
  movss xmm10,[maxdur]
  movss [rdx+34],xmm10
  vmovss xmm3,[rdx+34]
  jmp return

maxdur:
dq (float)100000

INJECT:
  jmp newmem
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db C5 FA 10 5A 34

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+29707FB

"ds.exe"+29707D0: 49 8B 03                 -  mov rax,[r11]
"ds.exe"+29707D3: 4C 8B 40 18              -  mov r8,[rax+18]
"ds.exe"+29707D7: 48 63 40 10              -  movsxd  rax,dword ptr [rax+10]
"ds.exe"+29707DB: 4D 8D 0C C0              -  lea r9,[r8+rax*8]
"ds.exe"+29707DF: 4D 3B C1                 -  cmp r8,r9
"ds.exe"+29707E2: 0F 84 AA 00 00 00        -  je ds.exe+2970892
"ds.exe"+29707E8: 0F 1F 84 00 00 00 00 00  -  nop dword ptr [rax+rax+00000000]
"ds.exe"+29707F0: 49 8B 10                 -  mov rdx,[r8]
"ds.exe"+29707F3: C5 E8 57 D2              -  vxorps xmm2,xmm2,xmm2
"ds.exe"+29707F7: 48 8B 42 28              -  mov rax,[rdx+28]
// ---------- INJECTING HERE ----------
"ds.exe"+29707FB: C5 FA 10 5A 34           -  vmovss xmm3,[rdx+34]
// ---------- DONE INJECTING  ----------
"ds.exe"+2970800: C5 E2 58 03              -  vaddss xmm0,xmm3,[rbx]
"ds.exe"+2970804: 8B 48 54                 -  mov ecx,[rax+54]
"ds.exe"+2970807: C4 E1 EA 2A D1           -  vcvtsi2ss xmm2,rdx,rcx
"ds.exe"+297080C: C5 F8 2F D4              -  vcomiss xmm2,xmm0,xmm4
"ds.exe"+2970810: C5 FA 11 03              -  vmovss [rbx],xmm0
"ds.exe"+2970814: C4 C1 6A 58 4D 00        -  vaddss xmm1,xmm2,[r13+00]
"ds.exe"+297081A: C4 C1 7A 11 4D 00        -  vmovss [r13+00],xmm1
"ds.exe"+2970820: 76 12                    -  jna ds.exe+2970834
"ds.exe"+2970822: C4 C1 7A 10 02           -  vmovss xmm0,[r10]
"ds.exe"+2970827: C5 E2 5E CA              -  vdivss xmm1,xmm3,xmm2
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>114</ID>
          <Description>"No Backpack Luggage Container Damage"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-09-25
  Author : 19712

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,ds.exe,C5 FA 10 42 30 C4 C1) // should be unique
alloc(newmem,$1000,"ds.exe"+2970834)

label(code)
label(return)
label(maxcondur)
newmem:

code:
  movss xmm7,[maxcondur]
  movss [rbx+30],xmm7
  vmovss xmm0,[rdx+30]
  jmp return
maxcondur:
dq (float)100000
INJECT:
  jmp newmem
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db C5 FA 10 42 30

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+2970834

"ds.exe"+2970807: C4 E1 EA 2A D1           -  vcvtsi2ss xmm2,rdx,rcx
"ds.exe"+297080C: C5 F8 2F D4              -  vcomiss xmm2,xmm0,xmm4
"ds.exe"+2970810: C5 FA 11 03              -  vmovss [rbx],xmm0
"ds.exe"+2970814: C4 C1 6A 58 4D 00        -  vaddss xmm1,xmm2,[r13+00]
"ds.exe"+297081A: C4 C1 7A 11 4D 00        -  vmovss [r13+00],xmm1
"ds.exe"+2970820: 76 12                    -  jna ds.exe+2970834
"ds.exe"+2970822: C4 C1 7A 10 02           -  vmovss xmm0,[r10]
"ds.exe"+2970827: C5 E2 5E CA              -  vdivss xmm1,xmm3,xmm2
"ds.exe"+297082B: C5 FA 5D C9              -  vminss xmm1,xmm0,xmm1
"ds.exe"+297082F: C4 C1 7A 11 0A           -  vmovss [r10],xmm1
// ---------- INJECTING HERE ----------
"ds.exe"+2970834: C5 FA 10 42 30           -  vmovss xmm0,[rdx+30]
// ---------- DONE INJECTING  ----------
"ds.exe"+2970839: C4 C1 7A 58 0E           -  vaddss xmm1,xmm0,[r14]
"ds.exe"+297083E: C4 C1 7A 11 0E           -  vmovss [r14],xmm1
"ds.exe"+2970843: 48 8B 42 28              -  mov rax,[rdx+28]
"ds.exe"+2970847: C5 F8 57 C0              -  vxorps xmm0,xmm0,xmm0
"ds.exe"+297084B: 8B 48 58                 -  mov ecx,[rax+58]
"ds.exe"+297084E: C4 E1 FA 2A C1           -  vcvtsi2ss xmm0,rax,rcx
"ds.exe"+2970853: C4 C1 7A 58 0F           -  vaddss xmm1,xmm0,[r15]
"ds.exe"+2970858: C4 C1 7A 11 0F           -  vmovss [r15],xmm1
"ds.exe"+297085D: 80 7A 20 05              -  cmp byte ptr [rdx+20],05
"ds.exe"+2970861: 75 05                    -  jne ds.exe+2970868
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>62</ID>
          <Description>"No Backpack Cover Durability Loss"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-07-22
  Author : gregory

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INF_BACKPACK_COVER_DURABILITY,ds.exe,89 86 C0 13 00 00) // should be unique
alloc(newmem,$1000,"ds.exe"+26C8EA6)

label(code)
label(return)

newmem:

code:
  mov eax,dword ptr [maxCoverDurability]
  mov [rsi+000013C0],eax
  jmp return

maxCoverDurability:
  dd (float)5000

INF_BACKPACK_COVER_DURABILITY:
  jmp newmem
  nop
return:
registersymbol(INF_BACKPACK_COVER_DURABILITY)

[DISABLE]

INF_BACKPACK_COVER_DURABILITY:
  db 89 86 C0 13 00 00

unregistersymbol(INF_BACKPACK_COVER_DURABILITY)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+26C8EA6

"ds.exe"+26C8E77: FF C1                             -  inc ecx
"ds.exe"+26C8E79: 3B 8D 90 01 00 00                 -  cmp ecx,[rbp+00000190]
"ds.exe"+26C8E7F: 7C EF                             -  jl ds.exe+26C8E70
"ds.exe"+26C8E81: 80 A6 78 34 00 00 FB              -  and byte ptr [rsi+00003478],-05
"ds.exe"+26C8E88: 0F B6 86 78 34 00 00              -  movzx eax,byte ptr [rsi+00003478]
"ds.exe"+26C8E8F: A8 08                             -  test al,08
"ds.exe"+26C8E91: 74 25                             -  je ds.exe+26C8EB8
"ds.exe"+26C8E93: 0F B6 86 80 27 00 00              -  movzx eax,byte ptr [rsi+00002780]
"ds.exe"+26C8E9A: 88 86 B8 13 00 00                 -  mov [rsi+000013B8],al
"ds.exe"+26C8EA0: 8B 86 88 27 00 00                 -  mov eax,[rsi+00002788]
// ---------- INJECTING HERE ----------
"ds.exe"+26C8EA6: 89 86 C0 13 00 00                 -  mov [rsi+000013C0],eax
// ---------- DONE INJECTING  ----------
"ds.exe"+26C8EAC: 8B 86 84 27 00 00                 -  mov eax,[rsi+00002784]
"ds.exe"+26C8EB2: 89 86 BC 13 00 00                 -  mov [rsi+000013BC],eax
"ds.exe"+26C8EB8: 48 8D BE 90 27 00 00              -  lea rdi,[rsi+00002790]
"ds.exe"+26C8EBF: 41 BD 88 00 00 00                 -  mov r13d,00000088
"ds.exe"+26C8EC5: 66 66 66 0F 1F 84 00 00 00 00 00  -  nop word ptr [rax+rax+00000000]
"ds.exe"+26C8ED0: 48 8B 07                          -  mov rax,[rdi]
"ds.exe"+26C8ED3: 80 78 18 00                       -  cmp byte ptr [rax+18],00
"ds.exe"+26C8ED7: 0F 84 7A 03 00 00                 -  je ds.exe+26C9257
"ds.exe"+26C8EDD: 4C 8B 47 48                       -  mov r8,[rdi+48]
"ds.exe"+26C8EE1: 4D 85 C0                          -  test r8,r8
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>602</ID>
          <Description>"No Cargo Fall Damage"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-08-20
  Author : SenorPlebeian

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(NOFALLDAMAGE,ds.exe,C4 C1 7A 11 4E 34 * * * * 75) // should be unique
alloc(newmem,$1000,"ds.exe"+293D37A)

label(code)
label(return)

newmem:

code:
  jmp return

NOFALLDAMAGE:
  jmp newmem
  nop
return:
registersymbol(NOFALLDAMAGE)

[DISABLE]

NOFALLDAMAGE:
  db C4 C1 7A 11 4E 34

unregistersymbol(NOFALLDAMAGE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+293D37A

"ds.exe"+293D347: C4 41 7A 10 5E 34        -  vmovss xmm11,[r14+34]
"ds.exe"+293D34D: C4 41 78 2F D8           -  vcomiss xmm11,xmm0,xmm8
"ds.exe"+293D352: C4 C1 78 28 FA           -  vmovaps xmm7,xmm10
"ds.exe"+293D357: 0F 86 2D 0B 00 00        -  jbe ds.exe+293DE8A
"ds.exe"+293D35D: C4 41 78 2F D0           -  vcomiss xmm10,xmm0,xmm8
"ds.exe"+293D362: 0F 86 22 0B 00 00        -  jbe ds.exe+293DE8A
"ds.exe"+293D368: 41 80 7E 20 05           -  cmp byte ptr [r14+20],05
"ds.exe"+293D36D: 41 B7 01                 -  mov r15l,01
"ds.exe"+293D370: C4 C1 22 5C C2           -  vsubss xmm0,xmm11,xmm10
"ds.exe"+293D375: C4 C1 7A 5F C8           -  vmaxss xmm1,xmm0,xmm8
// ---------- INJECTING HERE ----------
"ds.exe"+293D37A: C4 C1 7A 11 4E 34        -  vmovss [r14+34],xmm1
// ---------- DONE INJECTING  ----------
"ds.exe"+293D380: C5 A2 5C F9              -  vsubss xmm7,xmm11,xmm1
"ds.exe"+293D384: 75 0D                    -  jne ds.exe+293D393
"ds.exe"+293D386: 44 8B F9                 -  mov r15d,ecx
"ds.exe"+293D389: 41 C1 EF 10              -  shr r15d,10
"ds.exe"+293D38D: 41 80 E7 01              -  and r15l,01
"ds.exe"+293D391: EB 69                    -  jmp ds.exe+293D3FC
"ds.exe"+293D393: 49 8B 46 28              -  mov rax,[r14+28]
"ds.exe"+293D397: 80 78 3B 0A              -  cmp byte ptr [rax+3B],0A
"ds.exe"+293D39B: 75 0A                    -  jne ds.exe+293D3A7
"ds.exe"+293D39D: 41 80 BE 80 00 00 00 0F  -  cmp byte ptr [r14+00000080],0F
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>980</ID>
          <Description>"No Container Damage"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2021-07-07
  Author : 19712

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(inject,ds.exe,C5 FA 10 42 30 C4 C1) // should be unique
alloc(newmem,$1000,"ds.exe"+295E34F)

label(code)
label(return)
label(maxcondur)
newmem:

code:
  movss xmm1,[maxcondur]
  vmovss [r14+30],xmm1
  jmp return
maxcondur:
dq (float)100000
inject:
  jmp newmem
  db 90
return:
registersymbol(inject)

[DISABLE]

inject:
  db C4 C1 7A 11 4E 30

unregistersymbol(inject)
dealloc(newmem)

{
ds.exe+295E33C - 41 8B 8E 00020000     - mov ecx,[r14+00000200]
ds.exe+295E343 - 8B D1                 - mov edx,ecx
ds.exe+295E345 - C4C14A5CC4            - vsubss xmm0,xmm6,xmm12
ds.exe+295E34A - C4C17A5FC8            - vmaxss xmm1,xmm0,xmm8
// ---------- INJECTING HERE ----------
ds.exe+295E34F - C4C17A114E 30         - vmovss [r14+30],xmm1
// ---------- DONE INJECTING  ----------
ds.exe+295E355 - C54A5CE1              - vsubss xmm12,xmm6,xmm1
ds.exe+295E359 - 81 E2 00030000        - and edx,00000300
ds.exe+295E35F - 75 13                 - jne ds.exe+295E374
ds.exe+295E361 - 41 8B 86 04020000     - mov eax,[r14+00000204]
ds.exe+295E368 - C1 E8 03              - shr eax,03
ds.exe+295E36B - A8 01                 - test al,01

}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>967</ID>
      <Description>"Materials / Building"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>31</ID>
          <Description>"No Material Loss on Claim"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-07-21
  Author : gregory

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(NO_MATERIAL_CLAIM_DECREASE,ds.exe,4A 89 0C 12 49 83 E9 01) // should be unique
alloc(newmem,$1000,"ds.exe"+3089B24)

label(code)
label(return)

newmem:

code:
  cmp [rdx+r10],rcx
  jg out
  mov [rdx+r10],rcx
out:
  sub r9,01
  jmp return

NO_MATERIAL_CLAIM_DECREASE:
  jmp newmem
  nop 3
return:
registersymbol(NO_MATERIAL_CLAIM_DECREASE)

[DISABLE]

NO_MATERIAL_CLAIM_DECREASE:
  db 4A 89 0C 12 49 83 E9 01

unregistersymbol(NO_MATERIAL_CLAIM_DECREASE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+3089B24

"ds.exe"+3089B05: 49 8D 14 1B                       -  lea rdx,[r11+rbx]
"ds.exe"+3089B09: 4C 8B 03                          -  mov r8,[rbx]
"ds.exe"+3089B0C: 49 3B C8                          -  cmp rcx,r8
"ds.exe"+3089B0F: 72 05                             -  jb ds.exe+3089B16
"ds.exe"+3089B11: 49 2B C8                          -  sub rcx,r8
"ds.exe"+3089B14: EB 0A                             -  jmp ds.exe+3089B20
"ds.exe"+3089B16: 49 2B C8                          -  sub rcx,r8
"ds.exe"+3089B19: 48 01 0C 1F                       -  add [rdi+rbx],rcx
"ds.exe"+3089B1D: 48 8B C8                          -  mov rcx,rax
"ds.exe"+3089B20: 48 83 C3 08                       -  add rbx,08
// ---------- INJECTING HERE ----------
"ds.exe"+3089B24: 4A 89 0C 12                       -  mov [rdx+r10],rcx
"ds.exe"+3089B28: 49 83 E9 01                       -  sub r9,01
// ---------- DONE INJECTING  ----------
"ds.exe"+3089B2C: 75 D2                             -  jne ds.exe+3089B00
"ds.exe"+3089B2E: EB 5C                             -  jmp ds.exe+3089B8C
"ds.exe"+3089B30: 41 8B 92 90 00 00 00              -  mov edx,[r10+00000090]
"ds.exe"+3089B37: 48 63 F9                          -  movsxd  rdi,ecx
"ds.exe"+3089B3A: 48 8B 0D 9F 47 43 04              -  mov rcx,[ds.exe+74BE2E0]
"ds.exe"+3089B41: E8 CA 78 8E FF                    -  call ds.exe+2971410
"ds.exe"+3089B46: 4C 8B C0                          -  mov r8,rax
"ds.exe"+3089B49: 48 85 C0                          -  test rax,rax
"ds.exe"+3089B4C: 74 3E                             -  je ds.exe+3089B8C
"ds.exe"+3089B4E: 33 C0                             -  xor eax,eax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"Always Max Upgrade"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-07-21
  Author : gregory

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MAX_RES_ON_ADD_SMALL,ds.exe,01 81 10 02 00 00) // should be unique
alloc(newmem,$1000,"ds.exe"+295451F)

label(code)
label(return)

newmem:

code:
  //add [rcx+00000210],eax
  mov [rcx+00000210],#15000
  mov [rcx+00000214],#15000
  mov [rcx+00000218],#15000
  mov [rcx+0000021C],#15000
  mov [rcx+00000220],#15000
  mov [rcx+00000224],#15000
  jmp return

MAX_RES_ON_ADD_SMALL:
  jmp newmem
  nop
return:
registersymbol(MAX_RES_ON_ADD_SMALL)

[DISABLE]

MAX_RES_ON_ADD_SMALL:
  db 01 81 10 02 00 00

unregistersymbol(MAX_RES_ON_ADD_SMALL)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+295451F

"ds.exe"+29544FA: 41 55                    -  push r13
"ds.exe"+29544FC: 41 56                    -  push r14
"ds.exe"+29544FE: 41 57                    -  push r15
"ds.exe"+2954500: 48 8D 6C 24 E0           -  lea rbp,[rsp-20]
"ds.exe"+2954505: 48 81 EC 20 01 00 00     -  sub rsp,00000120
"ds.exe"+295450C: 48 8B 05 05 16 EF 01     -  mov rax,[ds.exe+4845B18]
"ds.exe"+2954513: 48 33 C4                 -  xor rax,rsp
"ds.exe"+2954516: 48 89 45 00              -  mov [rbp+00],rax
"ds.exe"+295451A: 8B 02                    -  mov eax,[rdx]
"ds.exe"+295451C: 4C 8B E2                 -  mov r12,rdx
// ---------- INJECTING HERE ----------
"ds.exe"+295451F: 01 81 10 02 00 00        -  add [rcx+00000210],eax
// ---------- DONE INJECTING  ----------
"ds.exe"+2954525: 4C 8B F1                 -  mov r14,rcx
"ds.exe"+2954528: 8B 1A                    -  mov ebx,[rdx]
"ds.exe"+295452A: 8B 42 04                 -  mov eax,[rdx+04]
"ds.exe"+295452D: 01 81 14 02 00 00        -  add [rcx+00000214],eax
"ds.exe"+2954533: 03 5A 04                 -  add ebx,[rdx+04]
"ds.exe"+2954536: 8B 42 08                 -  mov eax,[rdx+08]
"ds.exe"+2954539: 01 81 18 02 00 00        -  add [rcx+00000218],eax
"ds.exe"+295453F: 03 5A 08                 -  add ebx,[rdx+08]
"ds.exe"+2954542: 8B 42 0C                 -  mov eax,[rdx+0C]
"ds.exe"+2954545: 01 81 1C 02 00 00        -  add [rcx+0000021C],eax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>44</ID>
          <Description>"Instant Build/Upgrade"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-07-22
  Author : gregory

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(FAST_BUILD_TIMER,ds.exe,C5 FA 11 87 C0 00 00 00 80) // should be unique
alloc(newmem,$1000,"ds.exe"+298E2B3)

label(code)
label(return)
label(buildTimeRemaining)
label(fastBuildTime)

newmem:

code:
  mov [buildTimeRemaining],rdi
  add [buildTimeRemaining],000000C0
  vcomiss xmm0,[fastBuildTime]
  jbe out
  vmovss xmm0,[fastBuildTime]
out:
  vmovss [rdi+000000C0],xmm0
  jmp return

buildTimeRemaining:
  dq 0

fastBuildTime:
  dd (float)0

FAST_BUILD_TIMER:
  jmp newmem
  nop 3
return:
registersymbol(FAST_BUILD_TIMER)
registersymbol(buildTimeRemaining)
registersymbol(fastBuildTime)

[DISABLE]

FAST_BUILD_TIMER:
  db C5 FA 11 87 C0 00 00 00

unregistersymbol(FAST_BUILD_TIMER)
unregistersymbol(buildTimeRemaining)
unregistersymbol(fastBuildTime)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+298E2B3

"ds.exe"+298E281: EB 1C                    -  jmp ds.exe+298E29F
"ds.exe"+298E283: E8 B8 33 F2 FE           -  call ds.exe+18B1640
"ds.exe"+298E288: 48 8B 8B D8 00 00 00     -  mov rcx,[rbx+000000D8]
"ds.exe"+298E28F: 48 8B D0                 -  mov rdx,rax
"ds.exe"+298E292: E8 99 7F D5 FF           -  call ds.exe+26E6230
"ds.exe"+298E297: C5 FA 10 8F C0 00 00 00  -  vmovss xmm1,[rdi+000000C0]
"ds.exe"+298E29F: C5 FA 59 46 1C           -  vmulss xmm0,xmm0,[rsi+1C]
"ds.exe"+298E2A4: C5 F2 5C C8              -  vsubss xmm1,xmm1,xmm0
"ds.exe"+298E2A8: C5 F2 C2 C6 01           -  vcmpss xmm0,xmm1,xmm6,01
"ds.exe"+298E2AD: C4 E3 71 4A C6 00        -  unknown avx 0F3A 4A xmm0,xmm1,xmm6,00
// ---------- INJECTING HERE ----------
"ds.exe"+298E2B3: C5 FA 11 87 C0 00 00 00  -  vmovss [rdi+000000C0],xmm0
// ---------- DONE INJECTING  ----------
"ds.exe"+298E2BB: 80 7F 6D 00              -  cmp byte ptr [rdi+6D],00
"ds.exe"+298E2BF: 74 43                    -  je ds.exe+298E304
"ds.exe"+298E2C1: 33 D2                    -  xor edx,edx
"ds.exe"+298E2C3: 48 8B CF                 -  mov rcx,rdi
"ds.exe"+298E2C6: E8 45 4D FC FF           -  call ds.exe+2953010
"ds.exe"+298E2CB: 84 C0                    -  test al,al
"ds.exe"+298E2CD: 74 35                    -  je ds.exe+298E304
"ds.exe"+298E2CF: 48 8B 4F 48              -  mov rcx,[rdi+48]
"ds.exe"+298E2D3: 48 8D 97 80 00 00 00     -  lea rdx,[rdi+00000080]
"ds.exe"+298E2DA: 45 33 C0                 -  xor r8d,r8d
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>43</ID>
          <Description>"No Default Customization on Upgrade"</Description>
          <Options moAlwaysHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-07-21
  Author : gregory

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ERASE_CUSTOMIZATION_ON_UPGRADE,ds.exe,03 5A 14 89 5C 24 34 E8) // should be unique
alloc(newmem,$1000,"ds.exe"+2954563)

label(code)
label(return)
label(buildingBaseAddress)

newmem:

code:
  // Get Base Pointer
  mov [buildingBaseAddress],rcx
  // Set Flag to mark as default customization cleared.
  mov byte ptr [rcx+000000AE],10
  add ebx,[rdx+14]
  mov [rsp+34],ebx
  jmp return

buildingBaseAddress:
  dq 0

ERASE_CUSTOMIZATION_ON_UPGRADE:
  jmp newmem
  nop 2
return:
registersymbol(ERASE_CUSTOMIZATION_ON_UPGRADE)
registersymbol(buildingBaseAddress)

[DISABLE]

ERASE_CUSTOMIZATION_ON_UPGRADE:
  db 03 5A 14 89 5C 24 34

unregistersymbol(ERASE_CUSTOMIZATION_ON_UPGRADE)
unregistersymbol(buildingBaseAddress)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+2954563

"ds.exe"+2954539: 01 81 18 02 00 00           -  add [rcx+00000218],eax
"ds.exe"+295453F: 03 5A 08                    -  add ebx,[rdx+08]
"ds.exe"+2954542: 8B 42 0C                    -  mov eax,[rdx+0C]
"ds.exe"+2954545: 01 81 1C 02 00 00           -  add [rcx+0000021C],eax
"ds.exe"+295454B: 03 5A 0C                    -  add ebx,[rdx+0C]
"ds.exe"+295454E: 8B 42 10                    -  mov eax,[rdx+10]
"ds.exe"+2954551: 01 81 20 02 00 00           -  add [rcx+00000220],eax
"ds.exe"+2954557: 03 5A 10                    -  add ebx,[rdx+10]
"ds.exe"+295455A: 8B 42 14                    -  mov eax,[rdx+14]
"ds.exe"+295455D: 01 81 24 02 00 00           -  add [rcx+00000224],eax
// ---------- INJECTING HERE ----------
"ds.exe"+2954563: 03 5A 14                    -  add ebx,[rdx+14]
"ds.exe"+2954566: 89 5C 24 38                 -  mov [rsp+38],ebx
// ---------- DONE INJECTING  ----------
"ds.exe"+295456A: 48 89 4C 24 58              -  mov [rsp+58],rcx
"ds.exe"+295456F: E8 EC 52 FF FF              -  call ds.exe+2949860
"ds.exe"+2954574: 41 3B 86 84 00 00 00        -  cmp eax,[r14+00000084]
"ds.exe"+295457B: 41 BD 01 00 00 00           -  mov r13d,00000001
"ds.exe"+2954581: 8B F8                       -  mov edi,eax
"ds.exe"+2954583: 89 44 24 40                 -  mov [rsp+40],eax
"ds.exe"+2954587: 40 0F 97 C6                 -  seta sil
"ds.exe"+295458B: 45 33 FF                    -  xor r15d,r15d
"ds.exe"+295458E: 40 88 74 24 30              -  mov [rsp+30],sil
"ds.exe"+2954593: 45 38 AE B0 00 00 00        -  cmp [r14+000000B0],r13l
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>51</ID>
              <Description>"Base Address"</Description>
              <VariableType>Float</VariableType>
              <Address>buildingBaseAddress</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>52</ID>
              <Description>"Customization DIsabled?"</Description>
              <VariableType>Byte</VariableType>
              <Address>buildingBaseAddress</Address>
              <Offsets>
                <Offset>AE</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>53</ID>
              <Description>"Chiral Added"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>buildingBaseAddress</Address>
              <Offsets>
                <Offset>210</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>968</ID>
      <Description>"Missions"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>118</ID>
          <Description>"Disable Urgent Mission Timers"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2020-09-27
  Author : 19712

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,ds.exe,* * * * * 38 C5 FB 11 41 38) // should be unique
alloc(newmem,$1000,"ds.exe"+2F80115)

label(code)
label(return)

newmem:

code:
  vmovsd [rcx+38],xmm2
  jmp return

INJECT+06:
  jmp newmem
return:
registersymbol(INJECT)

[DISABLE]

INJECT+06:
  db C5 FB 11 41 38

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ds.exe"+2F80115

"ds.exe"+2F80107: CC                       -  int 3 
"ds.exe"+2F80108: CC                       -  int 3 
"ds.exe"+2F80109: CC                       -  int 3 
"ds.exe"+2F8010A: CC                       -  int 3 
"ds.exe"+2F8010B: CC                       -  int 3 
"ds.exe"+2F8010C: CC                       -  int 3 
"ds.exe"+2F8010D: CC                       -  int 3 
"ds.exe"+2F8010E: CC                       -  int 3 
"ds.exe"+2F8010F: CC                       -  int 3 
"ds.exe"+2F80110: C5 F3 58 41 38           -  vaddsd xmm0,xmm1,[rcx+38]
// ---------- INJECTING HERE ----------
"ds.exe"+2F80115: C5 FB 11 41 38           -  vmovsd [rcx+38],xmm0
// ---------- DONE INJECTING  ----------
"ds.exe"+2F8011A: C3                       -  ret 
"ds.exe"+2F8011B: CC                       -  int 3 
"ds.exe"+2F8011C: CC                       -  int 3 
"ds.exe"+2F8011D: CC                       -  int 3 
"ds.exe"+2F8011E: CC                       -  int 3 
"ds.exe"+2F8011F: CC                       -  int 3 
"ds.exe"+2F80120: CC                       -  int 3 
"ds.exe"+2F80121: CC                       -  int 3 
"ds.exe"+2F80122: CC                       -  int 3 
"ds.exe"+2F80123: CC                       -  int 3 
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>

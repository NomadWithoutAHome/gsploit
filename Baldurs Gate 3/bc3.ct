<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="29">
  <CheatEntries>
    <CheatEntry>
      <ID>236</ID>
      <Description>"Player Scripts"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(playerCharacters,$process,49 8B 59 28 33 C9 41 8B 54)
globalalloc(playerCharactersPtr,$100)
alloc(newmem,$1000,playerCharacters)

label(code)
label(return)
label(reset)

newmem:
  mov rbx,playerCharactersPtr
  xor rcx,rcx
@@:
  cmp qword ptr [rbx+rcx],r9
  je code
  cmp qword ptr [rbx+rcx],0
  je @f
  add rcx,8
  cmp rcx,20
  jge reset
  jmp @b
@@:
  mov [rbx+rcx],r9
  jmp code
reset:
  xor rcx,rcx
  mov [rbx+00],rcx
  mov [rbx+08],rcx
  mov [rbx+10],rcx
  mov [rbx+18],rcx
code:
  mov rbx,[r9+28]
  xor ecx,ecx
  jmp return

playerCharacters:
  jmp newmem
  nop
return:
registersymbol(playerCharacters)

[DISABLE]
playerCharacters:
  db 49 8B 59 28 33 C9
unregistersymbol(playerCharacters)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+2689603

"bg3.exe"+26895D8: 4C 8D 6A 10              -  lea r13,[rdx+10]
"bg3.exe"+26895DC: 4C 89 6C 24 38           -  mov [rsp+38],r13
"bg3.exe"+26895E1: 49 8B 7C 24 38           -  mov rdi,[r12+38]
"bg3.exe"+26895E6: 41 8B 44 24 44           -  mov eax,[r12+44]
"bg3.exe"+26895EB: 48 8D 34 C7              -  lea rsi,[rdi+rax*8]
"bg3.exe"+26895EF: 48 3B FE                 -  cmp rdi,rsi
"bg3.exe"+26895F2: 0F 84 D2 00 00 00        -  je bg3.exe+26896CA
"bg3.exe"+26895F8: 4D 8D 65 18              -  lea r12,[r13+18]
"bg3.exe"+26895FC: 4C 8B 6D B8              -  mov r13,[rbp-48]
"bg3.exe"+2689600: 4C 8B 0F                 -  mov r9,[rdi]
// ---------- INJECTING HERE ----------
"bg3.exe"+2689603: 49 8B 59 28              -  mov rbx,[r9+28]
"bg3.exe"+2689607: 33 C9                    -  xor ecx,ecx
// ---------- DONE INJECTING  ----------
"bg3.exe"+2689609: 41 8B 54 24 0C           -  mov edx,[r12+0C]
"bg3.exe"+268960E: 85 D2                    -  test edx,edx
"bg3.exe"+2689610: 74 1B                    -  je bg3.exe+268962D
"bg3.exe"+2689612: 4D 8B 04 24              -  mov r8,[r12]
"bg3.exe"+2689616: 49 39 1C C8              -  cmp [r8+rcx*8],rbx
"bg3.exe"+268961A: 74 08                    -  je bg3.exe+2689624
"bg3.exe"+268961C: FF C1                    -  inc ecx
"bg3.exe"+268961E: 3B CA                    -  cmp ecx,edx
"bg3.exe"+2689620: 73 0B                    -  jae bg3.exe+268962D
"bg3.exe"+2689622: EB F2                    -  jmp bg3.exe+2689616
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>321</ID>
          <Description>"Unlimited Actions/Spells"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(actions,$process,0F 28 F2 4C 8B F2 E8 ?? ?? ?? ?? 48 8D)
globalalloc(playerCharactersPtr,$100)
alloc(newmem,$1000,actions)

label(code)
label(return)
label(change)

newmem:
  mov r14,playerCharactersPtr
  mov rax,[r14+00]
  test rax,rax
  je @f
  cmp [rax+10],rbx
  je change
@@:
  mov rax,[r14+08]
  test rax,rax
  je @f
  cmp [rax+10],rbx
  je change
@@:
  mov rax,[r14+10]
  test rax,rax
  je @f
  cmp [rax+10],rbx
  je change
@@:
  mov rax,[r14+18]
  test rax,rax
  je @f
  cmp [rax+10],rbx
  je change
@@:
  jmp code
change:
  xorps xmm2,xmm2
code:
  movaps xmm6,xmm2
  mov r14,rdx
  jmp return

actions:
  jmp newmem
  nop
return:
registersymbol(actions)

[DISABLE]

actions:
  db 0F 28 F2 4C 8B F2

unregistersymbol(actions)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+2496B09

"bg3.exe"+2496AD7: 48 81 EC 80 00 00 00     -  sub rsp,00000080
"bg3.exe"+2496ADE: 0F 29 74 24 70           -  movaps [rsp+70],xmm6
"bg3.exe"+2496AE3: 48 8B 05 3E 24 62 03     -  mov rax,[bg3.exe+5AB8F28]
"bg3.exe"+2496AEA: 48 33 C4                 -  xor rax,rsp
"bg3.exe"+2496AED: 48 89 44 24 68           -  mov [rsp+68],rax
"bg3.exe"+2496AF2: 48 8B 19                 -  mov rbx,[rcx]
"bg3.exe"+2496AF5: 48 8B F9                 -  mov rdi,rcx
"bg3.exe"+2496AF8: 48 8B 0D 51 CF 69 03     -  mov rcx,[bg3.exe+5B33A50]
"bg3.exe"+2496AFF: 49 8B E9                 -  mov rbp,r9
"bg3.exe"+2496B02: 8B B4 24 D0 00 00 00     -  mov esi,[rsp+000000D0]
// ---------- INJECTING HERE ----------
"bg3.exe"+2496B09: 0F 28 F2                 -  movaps xmm6,xmm2
"bg3.exe"+2496B0C: 4C 8B F2                 -  mov r14,rdx
// ---------- DONE INJECTING  ----------
"bg3.exe"+2496B0F: E8 7C 1F 80 FF           -  call bg3.exe+1C98A90
"bg3.exe"+2496B14: 48 8D 54 24 58           -  lea rdx,[rsp+58]
"bg3.exe"+2496B19: 48 89 5C 24 58           -  mov [rsp+58],rbx
"bg3.exe"+2496B1E: 48 8D 4C 24 30           -  lea rcx,[rsp+30]
"bg3.exe"+2496B23: 48 89 44 24 60           -  mov [rsp+60],rax
"bg3.exe"+2496B28: E8 A3 FC 32 FF           -  call bg3.exe+17C67D0
"bg3.exe"+2496B2D: 44 8B CE                 -  mov r9d,esi
"bg3.exe"+2496B30: 4C 8D 05 51 BB 6C 03     -  lea r8,[bg3.exe+5B62688]
"bg3.exe"+2496B37: 48 8D 54 24 30           -  lea rdx,[rsp+30]
"bg3.exe"+2496B3C: 48 8D 4C 24 58           -  lea rcx,[rsp+58]
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>77</ID>
      <Description>"Health Pointer (equip something to populate)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(health,$process,44 89 ?? ?? 0F B6 4B)
alloc(newmem,$1000,health)

label(healthBkp)
label(healthPtr)
label(return)

newmem:
  mov rcx,healthPtr
  mov [rcx],rax
healthBkp:
  readmem(health,8)
  jmp return

healthPtr:
  dq 0

health:
  jmp newmem
  nop 3
return:
registersymbol(health)
registersymbol(healthBkp)
registersymbol(healthPtr)

[DISABLE]
health:
  readmem(healthBkp,8)
unregistersymbol(health)
unregistersymbol(healthBkp)
unregistersymbol(healthPtr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+229D0B3

"bg3.exe"+229D086: 41 8D 50 06           -  lea edx,[r8+06]
"bg3.exe"+229D08A: 48 8D 4C 24 50        -  lea rcx,[rsp+50]
"bg3.exe"+229D08F: E8 8C 2B F5 FE        -  call bg3.exe+11EFC20
"bg3.exe"+229D094: 48 8D 4C 24 50        -  lea rcx,[rsp+50]
"bg3.exe"+229D099: 83 7D 83 40           -  cmp dword ptr [rbp-7D],40
"bg3.exe"+229D09D: 48 0F 4F 4C 24 50     -  cmovg rcx,[rsp+50]
"bg3.exe"+229D0A3: 48 8B 01              -  mov rax,[rcx]
"bg3.exe"+229D0A6: 48 0F BA E8 05        -  bts rax,05
"bg3.exe"+229D0AB: 48 89 01              -  mov [rcx],rax
"bg3.exe"+229D0AE: 48 8B 44 24 40        -  mov rax,[rsp+40]
// ---------- INJECTING HERE ----------
"bg3.exe"+229D0B3: 44 89 78 60           -  mov [rax+60],r15d
"bg3.exe"+229D0B7: 0F B6 4B 24           -  movzx ecx,byte ptr [rbx+24]
// ---------- DONE INJECTING  ----------
"bg3.exe"+229D0BB: E8 60 1F 4B 00        -  call bg3.exe+274F020
"bg3.exe"+229D0C0: 84 C0                 -  test al,al
"bg3.exe"+229D0C2: 74 71                 -  je bg3.exe+229D135
"bg3.exe"+229D0C4: 0F B6 43 24           -  movzx eax,byte ptr [rbx+24]
"bg3.exe"+229D0C8: 41 8B 4C 86 1C        -  mov ecx,[r14+rax*4+1C]
"bg3.exe"+229D0CD: E8 CE 54 7A 00        -  call bg3.exe+2A425A0
"bg3.exe"+229D0D2: 44 8B F8              -  mov r15d,eax
"bg3.exe"+229D0D5: 89 44 24 24           -  mov [rsp+24],eax
"bg3.exe"+229D0D9: 48 83 C3 20           -  add rbx,20
"bg3.exe"+229D0DD: 8B 03                 -  mov eax,[rbx]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>80</ID>
          <Description>"Health"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>81</ID>
              <Description>"Current"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+50</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>82</ID>
              <Description>"Maximum"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+54</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>275</ID>
              <Description>"Absorb"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+58</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>83</ID>
              <Description>"God Mode"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">1:On
0:Off
</DropDownList>
              <VariableType>Byte</VariableType>
              <Address>+9C</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>67</ID>
      <Description>"Last Item Stack Changed (use split stack)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(ItemStackUpdate,$process,48 89 4C 24 20 41 89 47)
alloc(newmem,$1000,ItemStackUpdate)

label(code)
label(return)
label(ItemStackUpdatePtr)

newmem:
  mov rdx,ItemStackUpdatePtr
  mov [rdx],r12
code:
  mov [rsp+20],rcx
  jmp return

ItemStackUpdatePtr:
  dq 0

ItemStackUpdate:
  jmp newmem
return:
registersymbol(ItemStackUpdate)
registersymbol(ItemStackUpdatePtr)

[DISABLE]
ItemStackUpdate:
  db 48 89 4C 24 20
unregistersymbol(ItemStackUpdate)
unregistersymbol(ItemStackUpdatePtr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+2665FAA

"bg3.exe"+2665F7F: 49 89 47 58                 -  mov [r15+58],rax
"bg3.exe"+2665F83: 0F B7 44 24 40              -  movzx eax,word ptr [rsp+40]
"bg3.exe"+2665F88: 66 41 89 47 60              -  mov [r15+60],ax
"bg3.exe"+2665F8D: EB 05                       -  jmp bg3.exe+2665F94
"bg3.exe"+2665F8F: 48 8B 4C 24 20              -  mov rcx,[rsp+20]
"bg3.exe"+2665F94: 41 8B 84 24 F0 00 00 00     -  mov eax,[r12+000000F0]
"bg3.exe"+2665F9C: 41 39 47 64                 -  cmp [r15+64],eax
"bg3.exe"+2665FA0: 74 11                       -  je bg3.exe+2665FB3
"bg3.exe"+2665FA2: 89 44 24 44                 -  mov [rsp+44],eax
"bg3.exe"+2665FA6: 48 83 C9 04                 -  or rcx,04
// ---------- INJECTING HERE ----------
"bg3.exe"+2665FAA: 48 89 4C 24 20              -  mov [rsp+20],rcx
// ---------- DONE INJECTING  ----------
"bg3.exe"+2665FAF: 41 89 47 64                 -  mov [r15+64],eax
"bg3.exe"+2665FB3: 49 8B 04 24                 -  mov rax,[r12]
"bg3.exe"+2665FB7: BA 00 02 00 00              -  mov edx,00000200
"bg3.exe"+2665FBC: 49 8B CC                    -  mov rcx,r12
"bg3.exe"+2665FBF: FF 90 98 00 00 00           -  call qword ptr [rax+00000098]
"bg3.exe"+2665FC5: 45 33 F6                    -  xor r14d,r14d
"bg3.exe"+2665FC8: 41 8B CE                    -  mov ecx,r14d
"bg3.exe"+2665FCB: 84 C0                       -  test al,al
"bg3.exe"+2665FCD: 0F 94 C1                    -  sete cl
"bg3.exe"+2665FD0: 41 0F B6 87 9E 00 00 00     -  movzx eax,byte ptr [r15+0000009E]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>55</ID>
          <Description>"Item Pointer"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>322</ID>
              <Description>"Name (don't touch)"</Description>
              <VariableType>String</VariableType>
              <Length>99</Length>
              <Unicode>0</Unicode>
              <CodePage>0</CodePage>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>ItemStackUpdatePtr</Address>
              <Offsets>
                <Offset>28</Offset>
                <Offset>70</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>58</ID>
              <Description>"Name (don't touch)"</Description>
              <VariableType>String</VariableType>
              <Length>99</Length>
              <Unicode>0</Unicode>
              <CodePage>0</CodePage>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>ItemStackUpdatePtr</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>28</Offset>
                <Offset>70</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>56</ID>
              <Description>"Count"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>ItemStackUpdatePtr</Address>
              <Offsets>
                <Offset>F0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>267</ID>
      <Description>"Last Item Dropped"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(dropItem,$process,74 ?? 48 8B 13 48 8B CB FF 92 ?? ?? ?? ?? 48 8B ?? ?? ?? ?? ?? 48)
alloc(newmem,$1000,dropItem)

label(code)
label(return)
label(dropItemPtr)

newmem:
  mov rdx,dropItemPtr
  mov [rdx],rbx
code:
  mov rdx,[rbx]
  mov rcx,rbx
  jmp return

dropItemPtr:
  dq 0

dropItem+02:
  jmp newmem
  nop
return:
registersymbol(dropItem)
registersymbol(dropItemPtr)

[DISABLE]
dropItem+02:
  db 48 8B 13 48 8B CB
unregistersymbol(dropItem)
unregistersymbol(dropItemPtr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+25E984D

"bg3.exe"+25E982D: E8 BE F3 E2 FF        -  call bg3.exe+2418BF0
"bg3.exe"+25E9832: 48 8B D8              -  mov rbx,rax
"bg3.exe"+25E9835: 48 85 C0              -  test rax,rax
"bg3.exe"+25E9838: 74 4D                 -  je bg3.exe+25E9887
"bg3.exe"+25E983A: 48 8D 4F 10           -  lea rcx,[rdi+10]
"bg3.exe"+25E983E: 33 D2                 -  xor edx,edx
"bg3.exe"+25E9840: E8 1B EE DF FF        -  call bg3.exe+23E8660
"bg3.exe"+25E9845: 48 8B F0              -  mov rsi,rax
"bg3.exe"+25E9848: 48 85 C0              -  test rax,rax
"bg3.exe"+25E984B: 74 3A                 -  je bg3.exe+25E9887
// ---------- INJECTING HERE ----------
"bg3.exe"+25E984D: 48 8B 13              -  mov rdx,[rbx]
"bg3.exe"+25E9850: 48 8B CB              -  mov rcx,rbx
// ---------- DONE INJECTING  ----------
"bg3.exe"+25E9853: FF 92 D0 00 00 00     -  call qword ptr [rdx+000000D0]
"bg3.exe"+25E9859: 48 8B 15 C8 CF 54 03  -  mov rdx,[bg3.exe+5B36828]
"bg3.exe"+25E9860: 48 8D 4C 24 20        -  lea rcx,[rsp+20]
"bg3.exe"+25E9865: 4C 8B C0              -  mov r8,rax
"bg3.exe"+25E9868: 4C 8B CE              -  mov r9,rsi
"bg3.exe"+25E986B: E8 10 7C 14 00        -  call bg3.exe+2731480
"bg3.exe"+25E9870: 80 7C 24 28 00        -  cmp byte ptr [rsp+28],00
"bg3.exe"+25E9875: 75 10                 -  jne bg3.exe+25E9887
"bg3.exe"+25E9877: 33 C0                 -  xor eax,eax
"bg3.exe"+25E9879: 38 44 24 20           -  cmp [rsp+20],al
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>327</ID>
          <Description>"Name"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>String</VariableType>
          <Length>99</Length>
          <Unicode>0</Unicode>
          <CodePage>0</CodePage>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>dropItemPtr</Address>
          <Offsets>
            <Offset>28</Offset>
            <Offset>70</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>328</ID>
          <Description>"Name"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>String</VariableType>
          <Length>99</Length>
          <Unicode>0</Unicode>
          <CodePage>0</CodePage>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>dropItemPtr</Address>
          <Offsets>
            <Offset>0</Offset>
            <Offset>28</Offset>
            <Offset>70</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>329</ID>
          <Description>"Count"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>dropItemPtr</Address>
          <Offsets>
            <Offset>F0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>113</ID>
      <Description>"Gain Bonus Experience"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(addXp,$process,49 8B 46 70 48 8B 15)
alloc(newmem,$1000,addXp)

label(addXpBkp)
label(addXpVal)
label(return)

newmem:
  mov rax,addXpVal
  add r15d,[rax]
addXpBkp:
  readmem(addXp,4)
  reassemble(addXp+04)
  jmp return

align 10

addXpVal:
  dd #100

addXp:
  jmp newmem
  nop 6
return:
registersymbol(addXp)
registersymbol(addXpBkp)
registersymbol(addXpVal)

[DISABLE]
addXp:
  readmem(addXpBkp,4)
  reassemble(addXpBkp+04)
unregistersymbol(addXp)
unregistersymbol(addXpBkp)
unregistersymbol(addXpVal)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+21DD7E0

"bg3.exe"+21DD7BA: 4C 8B 0A              -  mov r9,[rdx]
"bg3.exe"+21DD7BD: 48 8D 55 C0           -  lea rdx,[rbp-40]
"bg3.exe"+21DD7C1: E8 6A 9C F4 FF        -  call bg3.exe+2127430
"bg3.exe"+21DD7C6: EB 0D                 -  jmp bg3.exe+21DD7D5
"bg3.exe"+21DD7C8: 4C 8B C6              -  mov r8,rsi
"bg3.exe"+21DD7CB: 48 8D 55 C0           -  lea rdx,[rbp-40]
"bg3.exe"+21DD7CF: E8 5C B0 F4 FF        -  call bg3.exe+2128830
"bg3.exe"+21DD7D4: 90                    -  nop 
"bg3.exe"+21DD7D5: 48 83 7D C0 00        -  cmp qword ptr [rbp-40],00
"bg3.exe"+21DD7DA: 0F 84 1A 03 00 00     -  je bg3.exe+21DDAFA
// ---------- INJECTING HERE ----------
"bg3.exe"+21DD7E0: 49 8B 46 70           -  mov rax,[r14+70]
"bg3.exe"+21DD7E4: 48 8B 15 6D 34 97 03  -  mov rdx,[bg3.exe+5B50C58]
// ---------- DONE INJECTING  ----------
"bg3.exe"+21DD7EB: 48 8B 88 68 02 00 00  -  mov rcx,[rax+00000268]
"bg3.exe"+21DD7F2: E8 C9 D8 84 00        -  call bg3.exe+2A2B0C0
"bg3.exe"+21DD7F7: F3 0F 2C D8           -  cvttss2si ebx,xmm0
"bg3.exe"+21DD7FB: 83 7D D8 03           -  cmp dword ptr [rbp-28],03
"bg3.exe"+21DD7FF: 7F 10                 -  jg bg3.exe+21DD811
"bg3.exe"+21DD801: 45 33 C0              -  xor r8d,r8d
"bg3.exe"+21DD804: 41 8D 50 04           -  lea edx,[r8+04]
"bg3.exe"+21DD808: 48 8D 4D D0           -  lea rcx,[rbp-30]
"bg3.exe"+21DD80C: E8 4F 26 01 FF        -  call bg3.exe+11EFE60
"bg3.exe"+21DD811: 48 8D 4D D0           -  lea rcx,[rbp-30]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>114</ID>
          <Description>"Amount"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>addXpVal</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>161</ID>
      <Description>"Character Pointers"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(character,$process,4A 8B 04 00 48 89 45 BF)
alloc(newmem,$1000,character)

label(code)
label(return)
label(characterPtr)
label(characterIdx)

newmem:
code:
  mov rax,[rax+r8]
  mov [characterPtr],rax
  mov [rbp-41],rax
  jmp return

align 10

characterPtr:
  dq 0
characterIdx:
  dq 0

character:
  jmp newmem
  nop 3
return:
registersymbol(character)
registersymbol(characterPtr)
registersymbol(characterIdx)

[DISABLE]
character:
  db 4A 8B 04 00 48 89 45 BF
unregistersymbol(character)
unregistersymbol(characterPtr)
unregistersymbol(characterIdx)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+2652AA8

"bg3.exe"+2652A7C: 48 63 05 AD 8A 4E 03  -  movsxd  rax,dword ptr [bg3.exe+5B3B530]
"bg3.exe"+2652A83: 89 45 A7              -  mov [rbp-59],eax
"bg3.exe"+2652A86: 48 8D 04 40           -  lea rax,[rax+rax*2]
"bg3.exe"+2652A8A: 48 C1 E0 06           -  shl rax,06
"bg3.exe"+2652A8E: 4A 8B 04 00           -  mov rax,[rax+r8]
"bg3.exe"+2652A92: 48 89 45 AF           -  mov [rbp-51],rax
"bg3.exe"+2652A96: 48 63 05 E7 89 4E 03  -  movsxd  rax,dword ptr [bg3.exe+5B3B484]
"bg3.exe"+2652A9D: 89 45 B7              -  mov [rbp-49],eax
"bg3.exe"+2652AA0: 48 8D 04 40           -  lea rax,[rax+rax*2]
"bg3.exe"+2652AA4: 48 C1 E0 06           -  shl rax,06
// ---------- INJECTING HERE ----------
"bg3.exe"+2652AA8: 4A 8B 04 00           -  mov rax,[rax+r8]
"bg3.exe"+2652AAC: 48 89 45 BF           -  mov [rbp-41],rax
// ---------- DONE INJECTING  ----------
"bg3.exe"+2652AB0: 48 63 05 35 8B 4E 03  -  movsxd  rax,dword ptr [bg3.exe+5B3B5EC]
"bg3.exe"+2652AB7: 89 45 C7              -  mov [rbp-39],eax
"bg3.exe"+2652ABA: 48 8D 04 40           -  lea rax,[rax+rax*2]
"bg3.exe"+2652ABE: 48 C1 E0 06           -  shl rax,06
"bg3.exe"+2652AC2: 4A 8B 04 00           -  mov rax,[rax+r8]
"bg3.exe"+2652AC6: 48 89 45 CF           -  mov [rbp-31],rax
"bg3.exe"+2652ACA: 48 63 05 C7 8A 4E 03  -  movsxd  rax,dword ptr [bg3.exe+5B3B598]
"bg3.exe"+2652AD1: 89 45 D7              -  mov [rbp-29],eax
"bg3.exe"+2652AD4: 48 8D 04 40           -  lea rax,[rax+rax*2]
"bg3.exe"+2652AD8: 48 C1 E0 06           -  shl rax,06
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>162</ID>
          <Description>"Character X"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>163</ID>
              <Description>"Change to Cycle Characters"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:First
1:Second
2:Third
3:Fourth
4:Fifth
5:Sixth
6:Seventh
7:Eighth
8:Ninth
9:Tenth
</DropDownList>
              <VariableType>4 Bytes</VariableType>
              <Address>characterIdx</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>164</ID>
              <Description>"Abilities"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>166</ID>
                  <Description>"Name1 (don't touch!)"</Description>
                  <VariableType>String</VariableType>
                  <Length>128</Length>
                  <Unicode>1</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>+40</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>168</ID>
                  <Description>"Name2 (don't touch!)"</Description>
                  <VariableType>String</VariableType>
                  <Length>128</Length>
                  <Unicode>1</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>+40</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>165</ID>
                  <Description>"Strength"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+64</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>169</ID>
                  <Description>"Dexterity"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+68</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>170</ID>
                  <Description>"Constitution"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+6C</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>171</ID>
                  <Description>"Intelligence"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+70</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>172</ID>
                  <Description>"Wisdom"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+74</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>173</ID>
                  <Description>"Charisma"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+78</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>143</ID>
      <Description>"Ability Stat Points (save game to populate)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Search player name followed by:
// Group: 4:6 4:0 4:7 4:0 4:0 4:12 4:10 4:12 4:12 4:12 4:11 4:0
[ENABLE]
aobscanmodule(stats,$process,45 8B 44 96 60)
alloc(newmem,$1000,stats)

label(code)
label(return)
label(statsPtr)

newmem:
  mov r8,statsPtr
  mov [r8],r14
code:
  mov r8d,[r14+rdx*4+60]
  jmp return

statsPtr:
  dq 0

stats:
  jmp newmem
return:
registersymbol(stats)
registersymbol(statsPtr)

[DISABLE]
stats:
  db 45 8B 44 96 60
unregistersymbol(stats)
unregistersymbol(statsPtr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+245B375

"bg3.exe"+245B350: 48 89 4C 24 30           -  mov [rsp+30],rcx
"bg3.exe"+245B355: 48 89 54 24 38           -  mov [rsp+38],rdx
"bg3.exe"+245B35A: 0F 10 44 24 30           -  movups xmm0,[rsp+30]
"bg3.exe"+245B35F: 0F 11 45 38              -  movups [rbp+38],xmm0
"bg3.exe"+245B363: 48 8B 4D 38              -  mov rcx,[rbp+38]
"bg3.exe"+245B367: 48 8B 45 40              -  mov rax,[rbp+40]
"bg3.exe"+245B36B: 48 3B C8                 -  cmp rcx,rax
"bg3.exe"+245B36E: 74 16                    -  je bg3.exe+245B386
"bg3.exe"+245B370: 48 63 D6                 -  movsxd  rdx,esi
"bg3.exe"+245B373: FF C6                    -  inc esi
// ---------- INJECTING HERE ----------
"bg3.exe"+245B375: 45 8B 44 96 60           -  mov r8d,[r14+rdx*4+60]
// ---------- DONE INJECTING  ----------
"bg3.exe"+245B37A: 44 89 01                 -  mov [rcx],r8d
"bg3.exe"+245B37D: 48 83 C1 04              -  add rcx,04
"bg3.exe"+245B381: 48 3B C8                 -  cmp rcx,rax
"bg3.exe"+245B384: 75 EA                    -  jne bg3.exe+245B370
"bg3.exe"+245B386: 48 8B 5C 24 60           -  mov rbx,[rsp+60]
"bg3.exe"+245B38B: 48 8B C5                 -  mov rax,rbp
"bg3.exe"+245B38E: 48 8B 6C 24 70           -  mov rbp,[rsp+70]
"bg3.exe"+245B393: 48 83 C4 40              -  add rsp,40
"bg3.exe"+245B397: 41 5E                    -  pop r14
"bg3.exe"+245B399: 5F                       -  pop rdi
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>144</ID>
          <Description>"Abilities"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>145</ID>
              <Description>"Strength"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+04</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>146</ID>
              <Description>"Dexterity"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+08</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>147</ID>
              <Description>"Constitution"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+0C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>148</ID>
              <Description>"Intelligence"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+10</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>149</ID>
              <Description>"Wisdom"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+14</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>150</ID>
              <Description>"Charisma"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+18</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>323</ID>
      <Description>"Zero Weight"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(weight,$process,F3 0F 10 40 18 F3 0F 59 05 ?? ?? ?? ?? FF 15 ?? ?? ?? ?? F3 0F 2C ?? EB)
weight:
  db 0F 57 C0 90 90
registersymbol(weight)

[DISABLE]
weight:
  db F3 0F 10 40 18
unregistersymbol(weight)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+1919B58

"bg3.exe"+1919B38: 3B 51 74                 -  cmp edx,[rcx+74]
"bg3.exe"+1919B3B: 7E 03                    -  jle bg3.exe+1919B40
"bg3.exe"+1919B3D: 8B 71 74                 -  mov esi,[rcx+74]
"bg3.exe"+1919B40: 8B 99 FC 00 00 00        -  mov ebx,[rcx+000000FC]
"bg3.exe"+1919B46: 85 DB                    -  test ebx,ebx
"bg3.exe"+1919B48: 79 4E                    -  jns bg3.exe+1919B98
"bg3.exe"+1919B4A: 48 83 C1 48              -  add rcx,48
"bg3.exe"+1919B4E: E8 6D 41 E0 FF           -  call bg3.exe+171DCC0
"bg3.exe"+1919B53: 48 85 C0                 -  test rax,rax
"bg3.exe"+1919B56: 74 19                    -  je bg3.exe+1919B71
// ---------- INJECTING HERE ----------
"bg3.exe"+1919B58: F3 0F 10 40 18           -  movss xmm0,[rax+18]
// ---------- DONE INJECTING  ----------
"bg3.exe"+1919B5D: F3 0F 59 05 43 9F 76 03  -  mulss xmm0,[bg3.exe+5083AA8]
"bg3.exe"+1919B65: FF 15 AD 99 38 03        -  call qword ptr [bg3.exe+4CA3518]
"bg3.exe"+1919B6B: F3 0F 2C D8              -  cvttss2si ebx,xmm0
"bg3.exe"+1919B6F: EB 27                    -  jmp bg3.exe+1919B98
"bg3.exe"+1919B71: 48 8B CF                 -  mov rcx,rdi
"bg3.exe"+1919B74: E8 17 FA FF FF           -  call bg3.exe+1919590
"bg3.exe"+1919B79: 48 8B D8                 -  mov rbx,rax
"bg3.exe"+1919B7C: 48 85 C0                 -  test rax,rax
"bg3.exe"+1919B7F: 74 15                    -  je bg3.exe+1919B96
"bg3.exe"+1919B81: 48 8B C8                 -  mov rcx,rax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>174</ID>
      <Description>"Always Win Rolls"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(rolls,$process,7D 04 32 C0 EB ?? B0 01 41)
alloc(rollsBkp,4)
rollsBkp:
  readmem(rolls+02,4)
rolls+02:
  nop 4
registersymbol(rolls)
registersymbol(rollsBkp)

[DISABLE]
rolls+02:
  readmem(rollsBkp,4)
unregistersymbol(rolls)
unregistersymbol(rollsBkp)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+22D0A72

"bg3.exe"+22D0A48: 74 0B                       -  je bg3.exe+22D0A55
"bg3.exe"+22D0A4A: 41 BC 0A 00 00 00           -  mov r12d,0000000A
"bg3.exe"+22D0A50: 45 2A EC                    -  sub r13l,r12l
"bg3.exe"+22D0A53: EB 15                       -  jmp bg3.exe+22D0A6A
"bg3.exe"+22D0A55: 45 8B A6 A8 00 00 00        -  mov r12d,[r14+000000A8]
"bg3.exe"+22D0A5C: 45 0F B6 AE 9C 00 00 00     -  movzx r13d,byte ptr [r14+0000009C]
"bg3.exe"+22D0A64: 41 83 FC 14                 -  cmp r12d,14
"bg3.exe"+22D0A68: 74 0E                       -  je bg3.exe+22D0A78
"bg3.exe"+22D0A6A: 41 0F BE 4E 59              -  movsx ecx,byte ptr [r14+59]
"bg3.exe"+22D0A6F: 39 4D C0                    -  cmp [rbp-40],ecx
// ---------- INJECTING HERE ----------
"bg3.exe"+22D0A72: 7D 04                       -  jnl bg3.exe+22D0A78
"bg3.exe"+22D0A74: 32 C0                       -  xor al,al
"bg3.exe"+22D0A76: EB 07                       -  jmp bg3.exe+22D0A7F
// ---------- DONE INJECTING  ----------
"bg3.exe"+22D0A78: B0 01                       -  mov al,01
"bg3.exe"+22D0A7A: 41 0F B6 4E 59              -  movzx ecx,byte ptr [r14+59]
"bg3.exe"+22D0A7F: 88 44 24 50                 -  mov [rsp+50],al
"bg3.exe"+22D0A83: 48 89 74 24 78              -  mov [rsp+78],rsi
"bg3.exe"+22D0A88: C6 45 80 00                 -  mov byte ptr [rbp-80],00
"bg3.exe"+22D0A8C: 0F BE D1                    -  movsx edx,cl
"bg3.exe"+22D0A8F: 4C 8B C6                    -  mov r8,rsi
"bg3.exe"+22D0A92: 0F B6 4D 58                 -  movzx ecx,byte ptr [rbp+58]
"bg3.exe"+22D0A96: 84 C9                       -  test cl,cl
"bg3.exe"+22D0A98: 4C 0F 45 45 38              -  cmovne r8,[rbp+38]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>210</ID>
      <Description>"Unlimited Spells (must have 3+ slots)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(spells,$process,F2 0F 10 76 18 F2)
alloc(newmem,$1000,spells)

label(code)
label(return)

newmem:
  cmp [rsp+34],BFF00000
  jne code
  cmp [rsi+24],40000000
  je code
  cmp [rsi+24],3FF00000
  je code
  movsd xmm6,[rsi+20]
  jmp return
code:
  movsd xmm6,[rsi+18]
  jmp return

spells:
  jmp newmem
return:
registersymbol(spells)

[DISABLE]
spells:
  db F2 0F 10 76 18
unregistersymbol(spells)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+20C3C6C

"bg3.exe"+20C3C3F: 48 89 44 24 58           -  mov [rsp+58],rax
"bg3.exe"+20C3C44: 48 8B 47 10              -  mov rax,[rdi+10]
"bg3.exe"+20C3C48: 48 89 44 24 50           -  mov [rsp+50],rax
"bg3.exe"+20C3C4D: 48 8D 44 24 30           -  lea rax,[rsp+30]
"bg3.exe"+20C3C52: 48 89 44 24 20           -  mov [rsp+20],rax
"bg3.exe"+20C3C57: 45 8B CF                 -  mov r9d,r15d
"bg3.exe"+20C3C5A: 4D 8B C4                 -  mov r8,r12
"bg3.exe"+20C3C5D: 48 8D 54 24 40           -  lea rdx,[rsp+40]
"bg3.exe"+20C3C62: 48 8D 4C 24 78           -  lea rcx,[rsp+78]
"bg3.exe"+20C3C67: E8 D4 6D 9B 00           -  call bg3.exe+2A7AA40
// ---------- INJECTING HERE ----------
"bg3.exe"+20C3C6C: F2 0F 10 76 18           -  movsd xmm6,[rsi+18]
// ---------- DONE INJECTING  ----------
"bg3.exe"+20C3C71: F2 0F 10 54 24 30        -  movsd xmm2,[rsp+30]
"bg3.exe"+20C3C77: F2 0F 58 D6              -  addsd xmm2,xmm6
"bg3.exe"+20C3C7B: 48 8B 07                 -  mov rax,[rdi]
"bg3.exe"+20C3C7E: 48 89 44 24 38           -  mov [rsp+38],rax
"bg3.exe"+20C3C83: 4C 8D 4E 28              -  lea r9,[rsi+28]
"bg3.exe"+20C3C87: 0F B6 85 58 03 00 00     -  movzx eax,byte ptr [rbp+00000358]
"bg3.exe"+20C3C8E: 88 44 24 20              -  mov [rsp+20],al
"bg3.exe"+20C3C92: 48 8B D6                 -  mov rdx,rsi
"bg3.exe"+20C3C95: 49 8B CE                 -  mov rcx,r14
"bg3.exe"+20C3C98: E8 13 0D 00 00           -  call bg3.exe+20C49B0
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>99</ID>
      <Description>"Ignore This"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>FFFFFF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>98</ID>
          <Description>"Last Interacted Object"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(interact,$process,C3 8B 41 ?? 8B 51 ?? 03 C2 C3)
alloc(newmem,$1000,interact)

label(interactBkp)
label(interactPtr)
label(return)

newmem:
  mov rax,interactPtr
  mov [rax],rcx
interactBkp:
  mov eax,[rcx+50]
  mov edx,[rcx+58]
  jmp return

interactPtr:
  dq 0

interact+01:
  jmp newmem
  nop
return:
registersymbol(interact)
registersymbol(interactBkp)
registersymbol(interactPtr)

[DISABLE]
interact+01:
  db 8B 41 50 8B 51 58
unregistersymbol(interact)
unregistersymbol(interactBkp)
unregistersymbol(interactPtr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+2999D0C

"bg3.exe"+2999CFC: CC                             -  int 3 
"bg3.exe"+2999CFD: CC                             -  int 3 
"bg3.exe"+2999CFE: CC                             -  int 3 
"bg3.exe"+2999CFF: CC                             -  int 3 
"bg3.exe"+2999D00: 84 D2                          -  test dl,dl
"bg3.exe"+2999D02: 74 08                          -  je bg3.exe+2999D0C
"bg3.exe"+2999D04: 8B 41 50                       -  mov eax,[rcx+50]
"bg3.exe"+2999D07: 33 D2                          -  xor edx,edx
"bg3.exe"+2999D09: 03 C2                          -  add eax,edx
"bg3.exe"+2999D0B: C3                             -  ret 
// ---------- INJECTING HERE ----------
"bg3.exe"+2999D0C: 8B 41 50                       -  mov eax,[rcx+50]
"bg3.exe"+2999D0F: 8B 51 58                       -  mov edx,[rcx+58]
// ---------- DONE INJECTING  ----------
"bg3.exe"+2999D12: 03 C2                          -  add eax,edx
"bg3.exe"+2999D14: C3                             -  ret 
"bg3.exe"+2999D15: CC                             -  int 3 
"bg3.exe"+2999D16: CC                             -  int 3 
"bg3.exe"+2999D17: CC                             -  int 3 
"bg3.exe"+2999D18: CC                             -  int 3 
"bg3.exe"+2999D19: CC                             -  int 3 
"bg3.exe"+2999D1A: CC                             -  int 3 
"bg3.exe"+2999D1B: CC                             -  int 3 
"bg3.exe"+2999D1C: CC                             -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>112</ID>
          <Description>"Gain Bonus Experience"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(experience,$process,44 01 7A 1C 83 7D D8 04)
alloc(newmem,$1000,experience)

label(code)
label(return)

newmem:
  // add r15d,#100
code:
  add [rdx+1C],r15d
  cmp dword ptr [rbp-28],04
  jmp return

experience:
  jmp newmem
  nop 3
return:
registersymbol(experience)

[DISABLE]
experience:
  db 44 01 7A 1C 83 7D D8 04
unregistersymbol(experience)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+21DD95A

"bg3.exe"+21DD931: 41 8D 50 02        -  lea edx,[r8+02]
"bg3.exe"+21DD935: 48 8D 4D D0        -  lea rcx,[rbp-30]
"bg3.exe"+21DD939: E8 22 25 01 FF     -  call bg3.exe+11EFE60
"bg3.exe"+21DD93E: 48 8D 4D D0        -  lea rcx,[rbp-30]
"bg3.exe"+21DD942: 83 7D DC 40        -  cmp dword ptr [rbp-24],40
"bg3.exe"+21DD946: 48 0F 4F 4D D0     -  cmovg rcx,[rbp-30]
"bg3.exe"+21DD94B: 48 8B 01           -  mov rax,[rcx]
"bg3.exe"+21DD94E: 48 0F BA E8 01     -  bts rax,01
"bg3.exe"+21DD953: 48 89 01           -  mov [rcx],rax
"bg3.exe"+21DD956: 48 8B 55 C0        -  mov rdx,[rbp-40]
// ---------- INJECTING HERE ----------
"bg3.exe"+21DD95A: 44 01 7A 1C        -  add [rdx+1C],r15d
"bg3.exe"+21DD95E: 83 7D D8 04        -  cmp dword ptr [rbp-28],04
// ---------- DONE INJECTING  ----------
"bg3.exe"+21DD962: 7F 10              -  jg bg3.exe+21DD974
"bg3.exe"+21DD964: 45 33 C0           -  xor r8d,r8d
"bg3.exe"+21DD967: 41 8D 50 05        -  lea edx,[r8+05]
"bg3.exe"+21DD96B: 48 8D 4D D0        -  lea rcx,[rbp-30]
"bg3.exe"+21DD96F: E8 EC 24 01 FF     -  call bg3.exe+11EFE60
"bg3.exe"+21DD974: 48 8D 4D D0        -  lea rcx,[rbp-30]
"bg3.exe"+21DD978: 83 7D DC 40        -  cmp dword ptr [rbp-24],40
"bg3.exe"+21DD97C: 48 0F 4F 4D D0     -  cmovg rcx,[rbp-30]
"bg3.exe"+21DD981: 48 8B 01           -  mov rax,[rcx]
"bg3.exe"+21DD984: 48 0F BA E8 04     -  bts rax,04
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>134</ID>
          <Description>"Max Ability Points at Creation"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(creationCap,$process,E8 4E 76 FD FF)
alloc(creationCapBkp,$1000)
creationCapBkp:
  readmem(creationCap,5)
creationCap:
  mov eax,1B
registersymbol(creationCap)
registersymbol(creationCapBkp)

[DISABLE]
creationCap:
  readmem(creationCapBkp,5)
unregistersymbol(creationCap)
unregistersymbol(creationCapBkp)
dealloc(creationCapBkp)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+2B3EDFD

"bg3.exe"+2B3EDDF: 48 63 CA                 -  movsxd  rcx,edx
"bg3.exe"+2B3EDE2: 83 7C 8C 5C 00           -  cmp dword ptr [rsp+rcx*4+5C],00
"bg3.exe"+2B3EDE7: 0F 95 C1                 -  setne cl
"bg3.exe"+2B3EDEA: 40 0A F9                 -  or dil,cl
"bg3.exe"+2B3EDED: FF C2                    -  inc edx
"bg3.exe"+2B3EDEF: 48 83 C0 04              -  add rax,04
"bg3.exe"+2B3EDF3: 49 3B C0                 -  cmp rax,r8
"bg3.exe"+2B3EDF6: 75 C0                    -  jne bg3.exe+2B3EDB8
"bg3.exe"+2B3EDF8: 33 D2                    -  xor edx,edx
"bg3.exe"+2B3EDFA: 48 8B CB                 -  mov rcx,rbx
// ---------- INJECTING HERE ----------
"bg3.exe"+2B3EDFD: E8 4E 76 FD FF           -  call bg3.exe+2B16450
// ---------- DONE INJECTING  ----------
"bg3.exe"+2B3EE02: 83 F8 1B                 -  cmp eax,1B
"bg3.exe"+2B3EE05: 8B 44 24 58              -  mov eax,[rsp+58]
"bg3.exe"+2B3EE09: 7D 07                    -  jnl bg3.exe+2B3EE12
"bg3.exe"+2B3EE0B: 0D 80 00 00 00           -  or eax,00000080
"bg3.exe"+2B3EE10: EB 06                    -  jmp bg3.exe+2B3EE18
"bg3.exe"+2B3EE12: 7E 04                    -  jle bg3.exe+2B3EE18
"bg3.exe"+2B3EE14: 0F BA E8 08              -  bts eax,08
"bg3.exe"+2B3EE18: 85 C0                    -  test eax,eax
"bg3.exe"+2B3EE1A: 75 05                    -  jne bg3.exe+2B3EE21
"bg3.exe"+2B3EE1C: 40 84 FF                 -  test dil,dil
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>136</ID>
          <Description>"Increase Creation Stat Cap"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(creationStatCap,$process,8B 0C B1 83 F9 07 7C ?? B8)
creationStatCap+05:
  db 10
registersymbol(creationStatCap)

[DISABLE]
creationStatCap+05:
  db 07
unregistersymbol(creationStatCap)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+1B53B24

"bg3.exe"+1B53B01: 48 85 C9              -  test rcx,rcx
"bg3.exe"+1B53B04: 74 09                 -  je bg3.exe+1B53B0F
"bg3.exe"+1B53B06: 48 81 C1 68 01 00 00  -  add rcx,00000168
"bg3.exe"+1B53B0D: EB 15                 -  jmp bg3.exe+1B53B24
"bg3.exe"+1B53B0F: 48 8B 4B 30           -  mov rcx,[rbx+30]
"bg3.exe"+1B53B13: 48 85 C9              -  test rcx,rcx
"bg3.exe"+1B53B16: 74 09                 -  je bg3.exe+1B53B21
"bg3.exe"+1B53B18: 48 81 C1 68 01 00 00  -  add rcx,00000168
"bg3.exe"+1B53B1F: EB 03                 -  jmp bg3.exe+1B53B24
"bg3.exe"+1B53B21: 48 8B CF              -  mov rcx,rdi
// ---------- INJECTING HERE ----------
"bg3.exe"+1B53B24: 8B 0C B1              -  mov ecx,[rcx+rsi*4]
"bg3.exe"+1B53B27: 83 F9 07              -  cmp ecx,07
// ---------- DONE INJECTING  ----------
"bg3.exe"+1B53B2A: 7C 15                 -  jl bg3.exe+1B53B41
"bg3.exe"+1B53B2C: B8 0A 00 00 00        -  mov eax,0000000A
"bg3.exe"+1B53B31: 48 8B 5C 24 30        -  mov rbx,[rsp+30]
"bg3.exe"+1B53B36: 48 8B 74 24 38        -  mov rsi,[rsp+38]
"bg3.exe"+1B53B3B: 48 83 C4 20           -  add rsp,20
"bg3.exe"+1B53B3F: 5F                    -  pop rdi
"bg3.exe"+1B53B40: C3                    -  ret 
"bg3.exe"+1B53B41: 33 D2                 -  xor edx,edx
"bg3.exe"+1B53B43: E8 58 28 FC 00        -  call bg3.exe+2B163A0
"bg3.exe"+1B53B48: 48 8B 4B 08           -  mov rcx,[rbx+08]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>199</ID>
          <Description>"Ignore Action/Spell Costs"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(actions,$process,F2 0F 10 43 18 66)
actions+04:
  db 20
registersymbol(actions)

[DISABLE]
actions+04:
  db 18
unregistersymbol(actions)

{
bg3.exe+20C3C67 - E8 D4 6D 9B 00           - call bg3.exe+2A7AA40
bg3.exe+20C3C6C - F2 0F 10 76 18           - movsd xmm6,[rsi+18]
bg3.exe+20C3C71 - F2 0F 10 54 24 30        - movsd xmm2,[rsp+30]
bg3.exe+20C3C77 - F2 0F 58 D6              - addsd xmm2,xmm6

// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+2A7A18E

"bg3.exe"+2A7A168: 48 8D 4D DF              -  lea rcx,[rbp-21]
"bg3.exe"+2A7A16C: 4D 8B C7                 -  mov r8,r15
"bg3.exe"+2A7A16F: 49 8B D6                 -  mov rdx,r14
"bg3.exe"+2A7A172: E8 E9 07 00 00           -  call bg3.exe+2A7A960
"bg3.exe"+2A7A177: 80 78 08 00              -  cmp byte ptr [rax+08],00
"bg3.exe"+2A7A17B: 75 2C                    -  jne bg3.exe+2A7A1A9
"bg3.exe"+2A7A17D: F2 0F 10 00              -  movsd xmm0,[rax]
"bg3.exe"+2A7A181: 66 0F 2F 45 67           -  comisd xmm0,[rbp+67]
"bg3.exe"+2A7A186: 0F 93 C0                 -  setae al
"bg3.exe"+2A7A189: E9 3C FF FF FF           -  jmp bg3.exe+2A7A0CA
// ---------- INJECTING HERE ----------
"bg3.exe"+2A7A18E: F2 0F 10 43 18           -  movsd xmm0,[rbx+18]
// ---------- DONE INJECTING  ----------
"bg3.exe"+2A7A193: 66 0F 2F 45 67           -  comisd xmm0,[rbp+67]
"bg3.exe"+2A7A198: 0F 93 C0                 -  setae al
"bg3.exe"+2A7A19B: E9 2A FF FF FF           -  jmp bg3.exe+2A7A0CA
"bg3.exe"+2A7A1A0: 48 8B C8                 -  mov rcx,rax
"bg3.exe"+2A7A1A3: E8 38 A4 F6 FE           -  call bg3.exe+19E45E0
"bg3.exe"+2A7A1A8: CC                       -  int 3 
"bg3.exe"+2A7A1A9: 48 8B C8                 -  mov rcx,rax
"bg3.exe"+2A7A1AC: E8 2F A4 F6 FE           -  call bg3.exe+19E45E0
"bg3.exe"+2A7A1B1: CC                       -  int 3 
"bg3.exe"+2A7A1B2: CC                       -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>213</ID>
          <Description>"Dump Class Names"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
{$lua}
--[[
bg3.exe+1E445 - 7F 59                 - jg bg3.exe+1E4A0
bg3.exe+1E447 - 48 8D 05 A247B105     - lea rax,[bg3.exe+5B32BF0] { (8) }
bg3.exe+1E44E - C7 44 24 28 1B000000  - mov [rsp+28],0000001B { 27 }
bg3.exe+1E456 - 48 89 05 8B3EB105     - mov [bg3.exe+5B322E8],rax { (7FF69B212BF0) }
bg3.exe+1E45D - 48 8D 05 80ACCC04     - lea rax,[bg3.exe+4CE90E4] { ("class ls::_StringView&lt;char&gt;&gt;(void)") }
bg3.exe+1E464 - 48 89 44 24 20        - mov [rsp+20],rax
bg3.exe+1E469 - 48 8B 05 6847B105     - mov rax,[bg3.exe+5B32BD8] { (7FF69B26EE40) }
]]

if syntaxcheck then return end

local scan = AOBScan("48 8D 05 ?? ?? ?? ?? ?? ?? ?? 28 ?? ?? ?? ?? 48 89 05 ?? ?? ?? ?? 48 8D 05", "+X-C-W")
if scan == nil then return end

local names = {}
local list = {}
local count = scan.Count - 1
for i = 0, count, 1 do
  local addr = tonumber(scan[i],16)
  local len = readInteger(addr + 0x0B) - 1
  if len &gt; 2000 then
    len = 2000
  end
  local indexAddr = addr + 0x00
  indexAddr = indexAddr + readInteger(indexAddr + 0x03) + 0x07
  local index = readInteger(indexAddr)
  local nameAddr = addr + 0x16
  nameAddr = nameAddr + readInteger(nameAddr + 0x03) + 0x07
  name = readString(nameAddr, len, false)
  local save = name
  local j = 2
  while names[save] ~= nil and names[save] ~= index do
    save = name .. " (" .. j .. ")"
    j = j + 1
  end
  if names[save] == nil then
    names[save] = index
    table.insert(list, save)
  end
end
scan.Destroy()
scan = nil

io.output("F:/BaldursGate3-Classes.txt")
table.sort(list)
for i,name in ipairs(list) do
  io.write(string.format("%04X %s\n",names[name],name))
end
io.close()

list = nil
names = nil

print("done")

{$asm}
[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>291</ID>
          <Description>"Dump Game Strings"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
{$lua}
--[[
bg3.exe+29890BF - CC                    - int 3
bg3.exe+29890C0 - 48 89 5C 24 10        - mov [rsp+10],rbx
bg3.exe+29890C5 - 57                    - push rdi
bg3.exe+29890C6 - 48 83 EC 20           - sub rsp,20 { 32 }
bg3.exe+29890CA - 48 8D 1D 4F7F4502     - lea rbx,[bg3.exe+4DE1020] { (7FF72AF03B88) }
bg3.exe+29890D1 - 48 8D 3D E0D64602     - lea rdi,[bg3.exe+4DF67B8] { (-1) }
bg3.exe+29890D8 - 48 83 3B 00           - cmp qword ptr [rbx],00 { 0 }
bg3.exe+29890DC - 74 28                 - je bg3.exe+2989106
bg3.exe+29890DE - 48 8D 4C 24 30        - lea rcx,[rsp+30]
bg3.exe+29890E3 - E8 68BC3B01           - call bg3.exe+3D44D50
bg3.exe+29890E8 - 48 8B 0B              - mov rcx,[rbx]
bg3.exe+29890EB - 48 8B D0              - mov rdx,rax
bg3.exe+29890EE - E8 2DC03B01           - call bg3.exe+3D45120
]]

if syntaxcheck then return end

local scan = AOBScan("48 8D 1D ?? ?? ?? ?? 48 8D 3D ?? ?? ?? ?? 48 83 3B 00", "+X-C-W")
if scan == nil then return end
local found = tonumber(scan[0],16)
scan.Destroy()
scan = nil

local item = found + readInteger(found + 3) + 7
found = found + 7
local last = found + readInteger(found + 3) + 7

io.output("F:/BaldursGate3-Strings.txt")
while item &lt; last do
  local addr = readPointer(item)
  if addr == 0 then
    addr = -1
  else
    addr = readInteger(addr)
  end
  local size = readInteger(item + 0x10)
  if size &gt; 0x1000 then
    size = 0x1000
  end
  local name = readPointer(item + 0x08)
  name = readString(name, size, false)
  io.write(string.format("%08X %s\n", addr, name))
  item = item + 0x18
end
io.close()

print("done")

{$asm}
[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>246</ID>
          <Description>"Dump Function Names"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
{$lua}
--[[
bg3.exe+2BAF04A - E8 A18A0300           - call bg3.exe+2BE7AF0
bg3.exe+2BAF04F - 90                    - nop
bg3.exe+2BAF050 - 48 8D 15 49A1EB02     - lea rdx,[bg3.exe+5A691A0] { (7FF6A5C310B8) }
bg3.exe+2BAF057 - 4C 8D 3D 1AA6EB02     - lea r15,[bg3.exe+5A69678] { (0) }
bg3.exe+2BAF05E - 44 8B 5C 24 40        - mov r11d,[rsp+40]
bg3.exe+2BAF063 - 4C 8B 74 24 38        - mov r14,[rsp+38]
bg3.exe+2BAF068 - 0F1F 84 00 00000000   - nop dword ptr [rax+rax+00000000]
bg3.exe+2BAF070 - 48 63 4A 08           - movsxd  rcx,dword ptr [rdx+08]
bg3.exe+2BAF074 - 41 3B CB              - cmp ecx,r11d
bg3.exe+2BAF077 - 75 45                 - jne bg3.exe+2BAF0BE

]]

if syntaxcheck then return end

local scan = AOBScan("48 8D ?? ?? ?? ?? ?? ?? 8D ?? ?? ?? ?? ?? 44 8B ?? 24 40", "+X-C-W")
if scan == nil then return end

local seen = {}
io.output("F:/BaldursGate3-Functions.txt")
local count = scan.Count - 1
for i = 0, count, 1 do
  local item = tonumber(scan[i], 16)
  --item = item - 32
  local last = item + 7
  item = item + readInteger(item + 3) + 7
  last = last + readInteger(last + 3) + 7
  if not seen[item] then
    seen[item] = true
    while item &lt; last do
      if last - item &lt; 0 or last - item &gt; 0x2000 then
        print(string.format("Bad List: %s - %X %X",scan[i],item,last))
        break
      end
      local size = readInteger(item + 0x08) - 1
      local name = readPointer(item)
      name = readString(name, size, false)
      local func = readPointer(item + 0x18)
      local unknown = readPointer(item + 0x10)
      io.write(string.format("%016X %016X %s\n", func, unknown, name))
      item = item + 0x28
    end
    io.write("\n")
  end
end
io.close()
seen = nil

scan.Destroy()
scan = nil

print("done")

{$asm}
[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>280</ID>
          <Description>"Function List 2"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(functionList,$process,48 8B 41 20 48 8B 04 D0 C3 33)
alloc(newmem,$1000,functionList)

label(code)
label(return)
label(functionListPtr)

newmem:
  mov rax,functionListPtr
  mov [rax],rcx
  mov [rax+08],rdx
code:
  mov rax,[rcx+20]
  mov rax,[rax+rdx*8]
  jmp return

functionListPtr:
  dq 0

functionList:
  jmp newmem
  nop 3
return:
registersymbol(functionList)
registersymbol(functionListPtr)

[DISABLE]
functionList:
  db 48 8B 41 20 48 8B 04 D0
unregistersymbol(functionList)
unregistersymbol(functionListPtr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+338D96E

"bg3.exe"+338D95A: CC                 -  int 3 
"bg3.exe"+338D95B: CC                 -  int 3 
"bg3.exe"+338D95C: CC                 -  int 3 
"bg3.exe"+338D95D: CC                 -  int 3 
"bg3.exe"+338D95E: CC                 -  int 3 
"bg3.exe"+338D95F: CC                 -  int 3 
"bg3.exe"+338D960: C1 EA 03           -  shr edx,03
"bg3.exe"+338D963: 81 E2 FF FF FF 01  -  and edx,01FFFFFF
"bg3.exe"+338D969: 3B 51 2C           -  cmp edx,[rcx+2C]
"bg3.exe"+338D96C: 73 09              -  jae bg3.exe+338D977
// ---------- INJECTING HERE ----------
"bg3.exe"+338D96E: 48 8B 41 20        -  mov rax,[rcx+20]
"bg3.exe"+338D972: 48 8B 04 D0        -  mov rax,[rax+rdx*8]
// ---------- DONE INJECTING  ----------
"bg3.exe"+338D976: C3                 -  ret 
"bg3.exe"+338D977: 33 C0              -  xor eax,eax
"bg3.exe"+338D979: C3                 -  ret 
"bg3.exe"+338D97A: CC                 -  int 3 
"bg3.exe"+338D97B: CC                 -  int 3 
"bg3.exe"+338D97C: CC                 -  int 3 
"bg3.exe"+338D97D: CC                 -  int 3 
"bg3.exe"+338D97E: CC                 -  int 3 
"bg3.exe"+338D97F: CC                 -  int 3 
"bg3.exe"+338D980: 48 89 5C 24 08     -  mov [rsp+08],rbx
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>281</ID>
              <Description>"List2"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>285</ID>
              <Description>"List3"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>282</ID>
              <Description>"Dump Function Names"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]
{$lua}
if syntaxcheck then return end

local funcInfo = function(addr)
  local info = {}
  local name = readPointer(addr + 0x08)
  info.name = readString(name, 256, false)
  info.args = {}
  local argCount = readInteger(addr + 0x18) - 1
  if argCount &gt; 10 then
    argCount = 10
  end
  local argList = readPointer(addr + 0x10)
  for i = 0, argCount do
    local argAddr = argList + i * 0x10
    local argName = readPointer(argAddr)
    argName = readString(argName, 256, false)
    local argType = readInteger(argAddr + 0x0C)
    local argInfo = {
      name = argName,
      isReturn = argType == 2
    }
    info.args[#info.args + 1] = argInfo
  end
  info.addr = readPointer(addr + 0x48)
  return info
end

local funcDef = function(info)
  local def = info.name .. "("
  local args = info.args
  for i = 1, #args do
    if not args[i].isReturn then
      if i &gt; 1 then
        def = def .. ", "
      end
      def = def .. args[i].name
    end
  end
  def = def .. ")"
  for i = 1, #args do
    if args[i].isReturn then
      def = def .. ": " .. args[i].name
    end
  end
  return def
end

local list = readPointer("functionListPtr")
if list == 0 then return end

local size = readInteger(list + 0x2C)
if size &gt; 3000 then
  -- just in case
  size = 3000
  print("truncated function list from "..size)
end

list = readPointer(list + 0x20)

io.output("F:/BaldursGate3-Functions2.txt")
for i = 1, size do
  local addr = readPointer(list)
  if addr ~= 0 then
    local info = funcInfo(addr)
    local def = funcDef(info)
    io.write(string.format("%016X %s\n", info.addr, def))
  end
  list = list + 0x08
end
io.close()

local list = readPointer("functionListPtr")
if list == 0 then return end

local size = readInteger(list + 0x4C)
if size &gt; 3000 then
  -- just in case
  size = 3000
  print("truncated function list from "..size)
end

list = readPointer(list + 0x40)

io.output("F:/BaldursGate3-Functions3.txt")
for i = 1, size do
  local addr = readPointer(list)
  if addr ~= 0 then
    local info = funcInfo(addr)
    local def = funcDef(info)
    io.write(string.format("%016X %s\n", info.addr, def))
  end
  list = list + 0x08
end
io.close()

print("done")

{$asm}
[DISABLE]
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>292</ID>
          <Description>"Wrappers1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
autoAssemble([[
aobscanmodule(wrappers,$process,E8 ?? ?? ?? ?? 48 8B 17 48 8D 4C 24 40 E8 ?? ?? ?? ?? 48 8D)
registersymbol(wrappers)
]])
local wrappers = getAddress("wrappers")
registerSymbol("wrapper1",wrappers+readInteger(wrappers+1,true)+5,true)
wrappers = wrappers + 0x0D
registerSymbol("wrapper2",wrappers+readInteger(wrappers+1,true)+5,true)
wrappers = wrappers + 0x29
registerSymbol("wrapper3",wrappers+readInteger(wrappers+1,true)+5,true)
unregisterSymbol("wrappers")
{$asm}

[DISABLE]
unregistersymbol(wrapper1)
unregistersymbol(wrapper2)
unregistersymbol(wrapper3)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>271</ID>
          <Description>"Has Recipe Unlocked"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(recipe,$process,44 8B 81 A4 00 00 00 33 C0 45 85 C0 74 16)
alloc(newmem,$1000,recipe)

label(code)
label(return)

newmem:

code:
  mov r8d,[rcx+000000A4]
  jmp return

recipe:
  jmp newmem
  nop 2
return:
registersymbol(recipe)

[DISABLE]
recipe:
  db 44 8B 81 A4 00 00 00
unregistersymbol(recipe)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+2406100

"bg3.exe"+24060F6: CC                    -  int 3 
"bg3.exe"+24060F7: CC                    -  int 3 
"bg3.exe"+24060F8: CC                    -  int 3 
"bg3.exe"+24060F9: CC                    -  int 3 
"bg3.exe"+24060FA: CC                    -  int 3 
"bg3.exe"+24060FB: CC                    -  int 3 
"bg3.exe"+24060FC: CC                    -  int 3 
"bg3.exe"+24060FD: CC                    -  int 3 
"bg3.exe"+24060FE: CC                    -  int 3 
"bg3.exe"+24060FF: CC                    -  int 3 
// ---------- INJECTING HERE ----------
"bg3.exe"+2406100: 44 8B 81 A4 00 00 00  -  mov r8d,[rcx+000000A4]
// ---------- DONE INJECTING  ----------
"bg3.exe"+2406107: 33 C0                 -  xor eax,eax
"bg3.exe"+2406109: 45 85 C0              -  test r8d,r8d
"bg3.exe"+240610C: 74 16                 -  je bg3.exe+2406124
"bg3.exe"+240610E: 4C 8B 89 98 00 00 00  -  mov r9,[rcx+00000098]
"bg3.exe"+2406115: 8B 12                 -  mov edx,[rdx]
"bg3.exe"+2406117: 41 39 14 81           -  cmp [r9+rax*4],edx
"bg3.exe"+240611B: 74 0C                 -  je bg3.exe+2406129
"bg3.exe"+240611D: FF C0                 -  inc eax
"bg3.exe"+240611F: 41 3B C0              -  cmp eax,r8d
"bg3.exe"+2406122: 72 F3                 -  jb bg3.exe+2406117
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>268</ID>
          <Description>"User Pointer"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(user,$process,0F B7 4F ?? 0F B7 57 ?? 44)
alloc(newmem,$1000,user)

label(userBkp)
label(userPtr)
label(return)

newmem:
  mov [userPtr],rax
userBkp:
  readmem(user,8)
  jmp return

userPtr:
  dq 0

user:
  jmp newmem
  nop 3
return:
registersymbol(user)
registersymbol(userBkp)
registersymbol(userPtr)

[DISABLE]
user:
  readmem(userBkp,8)
unregistersymbol(user)
unregistersymbol(userBkp)
unregistersymbol(userPtr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+3D7DCD7

"bg3.exe"+3D7DCA9: 48 33 C4                 -  xor rax,rsp
"bg3.exe"+3D7DCAC: 48 89 84 24 A0 00 00 00  -  mov [rsp+000000A0],rax
"bg3.exe"+3D7DCB4: 48 89 54 24 50           -  mov [rsp+50],rdx
"bg3.exe"+3D7DCB9: 48 8B F9                 -  mov rdi,rcx
"bg3.exe"+3D7DCBC: 48 8B 0D 0D CC E2 01     -  mov rcx,[bg3.exe+5BAA8D0]
"bg3.exe"+3D7DCC3: 48 8B DA                 -  mov rbx,rdx
"bg3.exe"+3D7DCC6: 45 84 C0                 -  test r8l,r8l
"bg3.exe"+3D7DCC9: 75 07                    -  jne bg3.exe+3D7DCD2
"bg3.exe"+3D7DCCB: 48 8B 0D 06 CC E2 01     -  mov rcx,[bg3.exe+5BAA8D8]
"bg3.exe"+3D7DCD2: E8 79 71 FC FF           -  call bg3.exe+3D44E50
// ---------- INJECTING HERE ----------
"bg3.exe"+3D7DCD7: 0F B7 4F 0E              -  movzx ecx,word ptr [rdi+0E]
"bg3.exe"+3D7DCDB: 0F B7 57 0C              -  movzx edx,word ptr [rdi+0C]
// ---------- DONE INJECTING  ----------
"bg3.exe"+3D7DCDF: 44 0F B7 47 0A           -  movzx r8d,word ptr [rdi+0A]
"bg3.exe"+3D7DCE4: 44 0F B7 4F 08           -  movzx r9d,word ptr [rdi+08]
"bg3.exe"+3D7DCE9: 44 0F B7 57 06           -  movzx r10d,word ptr [rdi+06]
"bg3.exe"+3D7DCEE: 44 0F B7 5F 04           -  movzx r11d,word ptr [rdi+04]
"bg3.exe"+3D7DCF3: 89 4C 24 48              -  mov [rsp+48],ecx
"bg3.exe"+3D7DCF7: 48 8D 4C 24 60           -  lea rcx,[rsp+60]
"bg3.exe"+3D7DCFC: 89 54 24 40              -  mov [rsp+40],edx
"bg3.exe"+3D7DD00: BA 40 00 00 00           -  mov edx,00000040
"bg3.exe"+3D7DD05: 44 89 44 24 38           -  mov [rsp+38],r8d
"bg3.exe"+3D7DD0A: 4C 8B C0                 -  mov r8,rax
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>269</ID>
              <Description>"User"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>234</ID>
          <Description>"Selected Character"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(selectedCharacter,$process,4C 8B E8 48 8B 50 10 48 89 54)
alloc(newmem,$1000,selectedCharacter)

label(code)
label(return)
label(selectedCharacterPtr)

newmem:
  mov r13,selectedCharacterPtr
  mov [r13],rax
code:
  mov r13,rax
  mov rdx,[rax+10]
  jmp return

selectedCharacterPtr:
  dq 0

selectedCharacter:
  jmp newmem
  nop 2
return:
registersymbol(selectedCharacter)
registersymbol(selectedCharacterPtr)

[DISABLE]
selectedCharacter:
  db 4C 8B E8 48 8B 50 10
unregistersymbol(selectedCharacter)
unregistersymbol(selectedCharacterPtr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+2631BF9

"bg3.exe"+2631BD5: 56                             -  push rsi
"bg3.exe"+2631BD6: 57                             -  push rdi
"bg3.exe"+2631BD7: 41 55                          -  push r13
"bg3.exe"+2631BD9: 48 81 EC 90 00 00 00           -  sub rsp,00000090
"bg3.exe"+2631BE0: 4C 89 60 10                    -  mov [rax+10],r12
"bg3.exe"+2631BE4: 48 8B E9                       -  mov rbp,rcx
"bg3.exe"+2631BE7: 4C 89 70 D0                    -  mov [rax-30],r14
"bg3.exe"+2631BEB: 4C 89 78 C8                    -  mov [rax-38],r15
"bg3.exe"+2631BEF: E8 5C 5C 05 00                 -  call bg3.exe+2687850
"bg3.exe"+2631BF4: 48 8D 4C 24 68                 -  lea rcx,[rsp+68]
// ---------- INJECTING HERE ----------
"bg3.exe"+2631BF9: 4C 8B E8                       -  mov r13,rax
"bg3.exe"+2631BFC: 48 8B 50 10                    -  mov rdx,[rax+10]
// ---------- DONE INJECTING  ----------
"bg3.exe"+2631C00: 48 89 54 24 58                 -  mov [rsp+58],rdx
"bg3.exe"+2631C05: 48 8D 54 24 58                 -  lea rdx,[rsp+58]
"bg3.exe"+2631C0A: E8 31 A9 80 FF                 -  call bg3.exe+1E3C540
"bg3.exe"+2631C0F: 48 8B 54 24 68                 -  mov rdx,[rsp+68]
"bg3.exe"+2631C14: 33 F6                          -  xor esi,esi
"bg3.exe"+2631C16: 48 8B 5C 24 70                 -  mov rbx,[rsp+70]
"bg3.exe"+2631C1B: 4C 8B C2                       -  mov r8,rdx
"bg3.exe"+2631C1E: 49 C1 E8 36                    -  shr r8,36
"bg3.exe"+2631C22: 48 89 94 24 D8 00 00 00        -  mov [rsp+000000D8],rdx
"bg3.exe"+2631C2A: 41 83 F8 40                    -  cmp r8d,40
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>235</ID>
              <Description>"Character"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>245</ID>
                  <Description>"ID"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>8 Bytes</VariableType>
                  <Address>+10</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>261</ID>
                  <Description>"Flags 1"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+30</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>262</ID>
                      <Description>"IsPlayer"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>Binary</VariableType>
                      <BitStart>1</BitStart>
                      <BitLength>1</BitLength>
                      <ShowAsBinary>0</ShowAsBinary>
                      <Address>+0</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>270</ID>
                      <Description>"IsImmortal"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>Binary</VariableType>
                      <BitStart>2</BitStart>
                      <BitLength>1</BitLength>
                      <ShowAsBinary>0</ShowAsBinary>
                      <Address>+1</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>263</ID>
                  <Description>"Flags 2"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+80</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>264</ID>
                      <Description>"IsGameMaster (don't do it)"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>Binary</VariableType>
                      <BitStart>7</BitStart>
                      <BitLength>1</BitLength>
                      <ShowAsBinary>0</ShowAsBinary>
                      <Address>+0</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>319</ID>
          <Description>"Characters (ignore)"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>237</ID>
              <Description>"Character 1"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>241</ID>
                  <Description>"ID"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>8 Bytes</VariableType>
                  <Address>+10</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>238</ID>
              <Description>"Character 2"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>242</ID>
                  <Description>"ID"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>8 Bytes</VariableType>
                  <Address>+10</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>239</ID>
              <Description>"Character 3"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>243</ID>
                  <Description>"ID"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>8 Bytes</VariableType>
                  <Address>+10</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>240</ID>
              <Description>"Character 4"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>244</ID>
                  <Description>"ID"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>8 Bytes</VariableType>
                  <Address>+10</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>175</ID>
          <Description>"Zero Weight"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(weight,$process,0F 5B C9 F3 0F 59 0D ?? ?? ?? ??0F 2E C1)
weight:
  db 0F 57 C9
registersymbol(weight)

[DISABLE]
weight:
  db 0F 5B C9
unregistersymbol(weight)

{
// ORIGINAL CODE - INJECTION POINT: "bg3.exe"+2DE302B

"bg3.exe"+2DE3003: 4C 8D 44 24 38           -  lea r8,[rsp+38]
"bg3.exe"+2DE3008: 48 8B 53 38              -  mov rdx,[rbx+38]
"bg3.exe"+2DE300C: 89 4C 24 38              -  mov [rsp+38],ecx
"bg3.exe"+2DE3010: 48 8B C8                 -  mov rcx,rax
"bg3.exe"+2DE3013: 4C 8B 08                 -  mov r9,[rax]
"bg3.exe"+2DE3016: 41 FF 51 28              -  call qword ptr [r9+28]
"bg3.exe"+2DE301A: 48 8B CF                 -  mov rcx,rdi
"bg3.exe"+2DE301D: E8 5E 91 C9 FE           -  call bg3.exe+1A7C180
"bg3.exe"+2DE3022: F3 0F 10 43 50           -  movss xmm0,[rbx+50]
"bg3.exe"+2DE3027: 66 0F 6E C8              -  movd xmm1,eax
// ---------- INJECTING HERE ----------
"bg3.exe"+2DE302B: 0F 5B C9                 -  cvtdq2ps xmm1,xmm1
"bg3.exe"+2DE302E: F3 0F 59 0D 1E 02 2A 02  -  mulss xmm1,[bg3.exe+5083254]
// ---------- DONE INJECTING  ----------
"bg3.exe"+2DE3036: 0F 2E C1                 -  ucomiss xmm0,xmm1
"bg3.exe"+2DE3039: 7A 02                    -  jp bg3.exe+2DE303D
"bg3.exe"+2DE303B: 74 2D                    -  je bg3.exe+2DE306A
"bg3.exe"+2DE303D: 48 8B 4B 48              -  mov rcx,[rbx+48]
"bg3.exe"+2DE3041: 48 83 C1 10              -  add rcx,10
"bg3.exe"+2DE3045: F3 0F 11 4B 50           -  movss [rbx+50],xmm1
"bg3.exe"+2DE304A: 48 8B 01                 -  mov rax,[rcx]
"bg3.exe"+2DE304D: FF 50 30                 -  call qword ptr [rax+30]
"bg3.exe"+2DE3050: 8B 4B 54                 -  mov ecx,[rbx+54]
"bg3.exe"+2DE3053: 4C 8D 44 24 38           -  lea r8,[rsp+38]
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>playerCharactersPtr</Name>
      <Address>276063E0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>--[[]
local addr = getAddress(process)
local size = getModuleSize(process)
print(string.format("%X %X", addr, addr+size))
--]]


</LuaScript>
</CheatTable>
